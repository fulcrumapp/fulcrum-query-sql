{"version":3,"sources":["../src/sort-expressions.js"],"names":["SortExpressions","sorts","schema","_expressions","map","o","Sort","_schema","sortByAsc","column","field","id","direction","sortByDesc","toJSON","expressions","toHumanDescription","hasSort","join","find","e","isValid","isEmpty"],"mappings":";;;;;AAAA;;;;;;IAEqBA,e;;;AACnB,2BAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AACzBD,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AAEA,SAAKE,YAAL,GAAoBF,KAAK,CAACG,GAAN,CAAU,UAAAC,CAAC;AAAA,aAAI,IAAIC,UAAJ,CAASD,CAAT,EAAYH,MAAZ,CAAJ;AAAA,KAAX,CAApB;AACA,SAAKK,OAAL,GAAeL,MAAf;AACD;;;;SAEDM,S,GAAA,mBAAUC,MAAV,EAAkB;AAChB,SAAKN,YAAL,GAAoB,CAAE,IAAIG,UAAJ,CAAS;AAACI,MAAAA,KAAK,EAAED,MAAM,CAACE,EAAf;AAAmBC,MAAAA,SAAS,EAAE;AAA9B,KAAT,EAA+C,KAAKL,OAApD,CAAF,CAApB;AACD,G;;SAEDM,U,GAAA,oBAAWJ,MAAX,EAAmB;AACjB,SAAKN,YAAL,GAAoB,CAAE,IAAIG,UAAJ,CAAS;AAACI,MAAAA,KAAK,EAAED,MAAM,CAACE,EAAf;AAAmBC,MAAAA,SAAS,EAAE;AAA9B,KAAT,EAAgD,KAAKL,OAArD,CAAF,CAApB;AACD,G;;SAcDO,M,GAAA,kBAAS;AACP,WAAO,KAAKC,WAAL,CAAiBX,GAAjB,CAAqB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACS,MAAF,EAAJ;AAAA,KAAtB,CAAP;AACD,G;;SAEDE,kB,GAAA,8BAAqB;AACnB,QAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,WAAO,KAAKF,WAAL,CAAiBX,GAAjB,CAAqB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACW,kBAAF,EAAJ;AAAA,KAAtB,EAAkDE,IAAlD,CAAuD,IAAvD,CAAP;AACD,G;;;;wBAtBa;AACZ,aAAO,KAAKf,YAAL,CAAkBgB,IAAlB,CAAuB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,OAAN;AAAA,OAAxB,KAA0C,IAAjD;AACD;;;wBAEa;AACZ,aAAO,CAAC,KAAKC,OAAb;AACD;;;wBAEiB;AAChB,aAAO,KAAKnB,YAAZ;AACD","sourcesContent":["import { Sort } from './sort';\n\nexport default class SortExpressions {\n  constructor(sorts, schema) {\n    sorts = sorts || [];\n\n    this._expressions = sorts.map(o => new Sort(o, schema));\n    this._schema = schema;\n  }\n\n  sortByAsc(column) {\n    this._expressions = [ new Sort({field: column.id, direction: 'asc'}, this._schema) ];\n  }\n\n  sortByDesc(column) {\n    this._expressions = [ new Sort({field: column.id, direction: 'desc'}, this._schema) ];\n  }\n\n  get isEmpty() {\n    return this._expressions.find(e => e.isValid) == null;\n  }\n\n  get hasSort() {\n    return !this.isEmpty;\n  }\n\n  get expressions() {\n    return this._expressions;\n  }\n\n  toJSON() {\n    return this.expressions.map(o => o.toJSON());\n  }\n\n  toHumanDescription() {\n    if (!this.hasSort) {\n      return null;\n    }\n\n    return this.expressions.map(o => o.toHumanDescription()).join(', ');\n  }\n}\n"],"file":"sort-expressions.js"}