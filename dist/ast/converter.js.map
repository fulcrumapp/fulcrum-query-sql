{"version":3,"sources":["../../src/ast/converter.js"],"names":["MAX_DISTINCT_VALUES","MAX_TILE_RECORDS","columnRef","column","isSQL","id","source","columnName","Converter","type","condition","options","args","nodeForExpressions","expressions","length","BooleanConverter","expression","BinaryConverter","value1","value2","isDateOperator","ConvertDateValue","GetDate","isDateTime","startOf","endOf","Between","NotBetween","In","arrayValue","NotIn","kind","operator","ConstValue","scalarValue","name","ConvertToText","escapeLikePercent","IsValidRegExp","AnyOf","values","map","v","a","b","rhs","now","range","value","arrayValues","hasNull","inValues","forEach","push","isInteger","isNumber","date","Date","toISOString","replace","utc","timeZone","moment","tz","guess","clone","isDate","isTime","isArray","string","RegExp","ex","toAST","query","sort","pageSize","pageIndex","boundingBox","searchFilter","targetList","joins","joinColumnsWithSorting","o","join","fromClause","whereClause","sortClause","limitOffset","limitCount","toCountAST","joinColumns","toTileAST","ast","over","statusColumn","schema","repeatable","form","toHistogramAST","bucketSize","subLinkColumn","col","table","expr","lhs","op","withClause","histogramWithClause","seriesFunctionSublinkSelect","seriesFunctionArgs","seriesFunctionCall","seriesFunction","bucketWidthFunctionCallArgs","bucketsSubqueryTargetList","bucketsSubqueryFromClause","bucketsSubqueryGroupClause","bucketsSubquerySortClause","bucketsSubquery","groupClause","bucketsSubselect","joinExpr","toDistinctValuesAST","valueColumn","isLinkedRecord","element","isRecordLinkElement","unnestArrays","isCalculatedElement","display","timeZoneCast","param","toTimestamp","inner","tableName","key","alias","sourceColumn","joinColumn","subQuery","linkedSubselect","rarg","sourceTableName","by","toSummaryAST","columnSetting","summary","aggregate","AggregateType","Histogram","histogramAttributes","summaryTargetList","summaryWhereClause","recordsTargetList","datePartArgs","recordsFromClause","recordsWhere","recordsSelect","recordsExpr","statsTargetList","statsFromClause","statsSelect","statsExpr","toSchemaAST","schemaOnly","list","subJoinColumns","indexOf","createdByColumn","updatedByColumn","assignedToColumn","projectColumn","leftJoins","exactColumns","baseQuery","queryAST","referencedColumns","concat","JSON","parse","stringify","duplicateResTargetWithExactName","SelectStmt","formQueryRangeVar","visitedTables","joinClause","search","systemParts","filterNode","nodeForCondition","filter","boundingBoxFilter","trim","nodeForExpression","dateFilter","createExpressionForColumnFilter","statusFilter","projectFilter","assignmentFilter","changesetFilter","columnSettings","columns","item","hasFilter","isValid","apply","exactName","resTarget","findResTarget","existing","ResTarget","hasStar","find","target","val","ColumnRef","fields","A_Star","index","full","repeatableKey","except","hasValues","getTime","isEmptySet","xmin","ymin","xmax","ymax","box1","box2","boxes","geometryQuery","toTsQuery","dictionary","term","makeTsQueryCall","toLowerCase","terms","split","s","shift","tsQueries","ftsExpression","ilikeExpression","andArgs","converters","Empty","NotEmpty","PercentEmpty","PercentNotEmpty","expressionConverter","simpleFunctionResTarget","funcName","converter","Sum","Average","Min","Max","StdDev","Unique","agg_distinct","PercentUnique","e","ConditionType","And","AndConverter","Or","OrConverter","Not","NotConverter","OperatorType","EmptyConverter","NotEmptyConverter","Equal","EqualConverter","NotEqual","NotEqualConverter","GreaterThan","GreaterThanConverter","GreaterThanOrEqual","GreaterThanOrEqualConverter","LessThan","LessThanConverter","LessThanOrEqual","LessThanOrEqualConverter","BetweenConverter","NotBetweenConverter","InConverter","NotInConverter","TextContain","TextContainConverter","TextNotContain","TextNotContainConverter","TextStartsWith","TextStartsWithConverter","TextEndsWith","TextEndsWithConverter","TextEqual","TextEqualConverter","TextNotEqual","TextNotEqualConverter","TextMatch","TextMatchConverter","TextNotMatch","TextNotMatchConverter","DateEqual","DateNotEqual","DateAfter","DateOnOrAfter","DateBefore","DateOnOrBefore","DateBetween","DateNotBetween","ArrayAnyOf","ArrayAnyOfConverter","ArrayAllOf","ArrayAllOfConverter","ArrayEqual","ArrayEqualConverter","Search","SearchConverter","DateToday","DynamicDateConverter","DateYesterday","DateTomorrow","DateLast7Days","DateLast30Days","DateLast90Days","DateLastMonth","DateLastYear","DateNextWeek","DateNextMonth","DateNextYear","DateCurrentCalendarWeek","DateCurrentCalendarMonth","DateCurrentCalendarYear","DatePreviousCalendarWeek","DatePreviousCalendarMonth","DatePreviousCalendarYear","DateNextCalendarWeek","DateNextCalendarMonth","DateNextCalendarYear","DateDaysFromNow","DateWeeksFromNow","DateMonthsFromNow","DateYearsFromNow","DateDaysAgo","DateWeeksAgo","DateMonthsAgo","DateYearsAgo"],"mappings":"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","sourcesContent":["import { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport { AggregateType } from '../aggregate';\nimport moment from 'moment-timezone';\n\nconst MAX_DISTINCT_VALUES = 1000;\nconst MAX_TILE_RECORDS = 1000;\n\nconst columnRef = (column) => {\n  return column.isSQL ? ColumnRef(column.id, column.source)\n                      : ColumnRef(column.columnName, column.source);\n};\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort, boundingBox);\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, {searchFilter}) {\n    let targetList = null;\n\n    if (query.ast) {\n      const sort = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n      targetList = [\n        ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__id'),\n        ResTarget(ColumnRef('__geometry'))\n      ];\n    } else {\n      const statusColumn = query.schema.repeatable ? '_record_status' : '_status';\n\n      targetList = [\n        ResTarget(ColumnRef(query.schema.repeatable ? '_child_record_id' : '_record_id'), 'id'),\n        ResTarget(ColumnRef('_geometry'), 'geometry'),\n        ResTarget(ColumnRef(statusColumn), 'status'),\n        ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n      ];\n\n      if (query.schema.repeatable) {\n        targetList.push(ResTarget(ColumnRef('_record_id'), 'record_id'));\n        targetList.push(ResTarget(ColumnRef('_parent_id'), 'parent_id'));\n      }\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    const limitCount = this.limitCount(MAX_TILE_RECORDS);\n\n    return SelectStmt({targetList, fromClause, whereClause, limitCount});\n  }\n\n  toHistogramAST(query, {column, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const subLinkColumn = (col, table) => {\n      return SubLink(4, SelectStmt({\n        targetList: [ ResTarget(ColumnRef(col)) ],\n        fromClause: [ RangeVar(table) ]\n      }));\n    };\n\n    const expr = (lhs, op, rhs) => {\n      return AExpr(0, op, lhs, rhs);\n    };\n\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(expr(ColumnRef('series', 'series'),\n                               '-',\n                               AConst(IntegerValue(1))),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_min'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(ColumnRef('series', 'series'),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_max'),\n\n      ResTarget(subLinkColumn('range', '__stats'), 'range'),\n      ResTarget(subLinkColumn('bucket_width', '__stats'), 'bucket_width')\n    ];\n\n    const withClause = this.histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    const valueColumn = query.ast ? ColumnRef(options.column.id) : columnRef(options.column);\n\n    let targetList = null;\n\n    const isLinkedRecord = options.column.element && options.column.element.isRecordLinkElement;\n\n    if (isLinkedRecord) {\n      targetList = [ ResTarget(ColumnRef('linked_record_id', '__linked_join'), 'value') ];\n    } else if (options.column.isArray && options.unnestArrays !== false) {\n      targetList = [ ResTarget(FuncCall('unnest', [ valueColumn ]), 'value') ];\n    } else if (options.column.element && options.column.element.isCalculatedElement && options.column.element.display.isDate) {\n      // SELECT pg_catalog.timezone('UTC', to_timestamp(column_name))::date\n\n      const timeZoneCast = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('timezone') ], [ AConst(StringValue('UTC')), param ]);\n      };\n\n      const toTimestamp = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('to_timestamp') ], [ param ]);\n      };\n\n      targetList = [ ResTarget(TypeCast(TypeName('date'), timeZoneCast(toTimestamp(valueColumn))), 'value') ];\n    } else {\n      targetList = [ ResTarget(valueColumn, 'value') ];\n    }\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    if (isLinkedRecord) {\n      targetList.push(ResTarget(ColumnRef('__title', '__linked'), 'label'));\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (options.column.join) {\n      joins.push(options.column.join);\n    }\n\n    if (isLinkedRecord) {\n      joins.push({inner: false,\n                  tableName: `${query.form.id}/${options.column.element.key}`,\n                  alias: '__linked_join',\n                  sourceColumn: '_record_id',\n                  joinColumn: 'source_record_id'});\n\n      const subQuery = SelectStmt({\n        targetList: [ ResTarget(ColumnRef('_title'), '__title'),\n                      ResTarget(ColumnRef('_record_id'), '__record_id') ],\n        fromClause: [ RangeVar(`${options.column.element.form.id}`) ]\n      });\n\n      const linkedSubselect = RangeSubselect(subQuery, Alias('__linked'));\n\n      joins.push({inner: false,\n                  rarg: linkedSubselect,\n                  alias: '__linked',\n                  sourceTableName: '__linked_join',\n                  sourceColumn: 'linked_record_id',\n                  joinColumn: '__record_id'});\n    }\n\n    const fromClause = this.fromClause(query, joins, [ options.column ]);\n\n    // const whereClause = null; // options.all ? null : this.whereClause(query);\n    // TODO(zhm) need to pass the bbox and search here?\n    const whereClause = this.whereClause(query, null, null, options);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    if (isLinkedRecord) {\n      groupClause.push(AConst(IntegerValue(3)));\n    }\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    if (isLinkedRecord) {\n      sortClause.push(SortBy(AConst(IntegerValue(3)), 1, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    const limitCount = this.limitCount(MAX_DISTINCT_VALUES);\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause, limitCount});\n  }\n\n  toSummaryAST(query, columnSetting, {boundingBox, searchFilter}) {\n    if (columnSetting.summary.aggregate === AggregateType.Histogram.name) {\n      const histogramAttributes = {\n        column: columnSetting.column,\n        bucketSize: 12,\n        type: columnSetting.column.isDate ? 'date' : 'number',\n        sort: null,\n        boundingBox,\n        searchFilter\n      };\n\n      return this.toHistogramAST(query, histogramAttributes);\n    }\n\n    const targetList = this.summaryTargetList(query, columnSetting);\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (columnSetting.column.join) {\n      joins.push(columnSetting.column.join);\n    }\n\n    const fromClause = this.fromClause(query, joins, [ columnSetting.column ]);\n\n    const whereClause = this.summaryWhereClause(query, columnSetting, {boundingBox, searchFilter});\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), columnRef(column))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), columnRef(column)), 'value') ];\n    }\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const recordsFromClause = this.fromClause(query, joins, [ column ]);\n\n    const recordsWhere = this.whereClause(query, boundingBox, searchFilter);\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause, whereClause: recordsWhere});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(AExpr(0, '-', FuncCall('max', [ ColumnRef('value') ]), FuncCall('min', [ ColumnRef('value') ])), 'range'),\n      ResTarget(AExpr(0, '/', AExpr(0, '-', TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('max', [ ColumnRef('value') ])),\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('min', [ ColumnRef('value') ]))),\n      AConst(FloatValue(bucketSize))), 'bucket_width')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  toSchemaAST(query, {schemaOnly} = {}) {\n    // wrap the query in a subquery with 1=0\n\n    const targetList = [ ResTarget(ColumnRef(AStar())) ];\n    const fromClause = [ RangeSubselect(query, Alias('wrapped')) ];\n    const whereClause = schemaOnly ? AExpr(0, '=', AConst(IntegerValue(0)), AConst(IntegerValue(1)))\n                                   : null;\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort, boundingBox) {\n    const list = [\n      ResTarget(ColumnRef(AStar(), 'records'))\n    ];\n\n    const subJoinColumns = query.joinColumnsWithSorting;\n\n    if (subJoinColumns.indexOf(query.schema.createdByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.createdByColumn.join.alias), query.schema.createdByColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.updatedByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.updatedByColumn.join.alias), query.schema.updatedByColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.assignedToColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.assignedToColumn.join.alias), query.schema.assignedToColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.projectColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.projectColumn.join.alias), query.schema.projectColumn.id));\n    }\n\n    list.push(ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__row_number'));\n\n    return list;\n  }\n\n  fromClause(query, leftJoins = [], exactColumns) {\n    let baseQuery = null;\n\n    if (query.ast) {\n      let queryAST = query.ast;\n\n      const referencedColumns = query.referencedColumns.concat(exactColumns || []);\n\n      // If there's an `exactColumn`, pick it out specifically with a guaranteed unique alias so it can be\n      // referenced with certainty in outer queries. The following is an oversimplified example of the problem:\n      //\n      // if `id` is part of the table and needs to be references in the outer query, it must be called out specifically:\n      //\n      // INVALID:\n      //   SELECT * FROM(SELECT *, *, * FROM table) WHERE id = ...\n      //\n      // VALID:\n      //   SELECT * FROM(SELECT *, *, *, id AS __value FROM table) WHERE __value = ...\n      //\n      // Given arbitrary subqueries, we must be able to reference columns in them exactly even when there are duplicates.\n      // We can't assume they're all simple ColumnRef's either. Some ResTarget's might be entire graphs of expressions which\n      // needs to be duplicated to ensure uniqueness.\n      if (referencedColumns.length) {\n        queryAST = JSON.parse(JSON.stringify(queryAST));\n\n        for (const column of referencedColumns) {\n          Converter.duplicateResTargetWithExactName(query, queryAST.SelectStmt.targetList,\n                                                    column, column.id);\n        }\n      }\n\n      return [ RangeSubselect(queryAST, Alias('records')) ];\n    }\n\n    baseQuery = this.formQueryRangeVar(query);\n\n    const visitedTables = {};\n\n    if (leftJoins) {\n      for (const join of leftJoins) {\n        if (!visitedTables[join.alias]) {\n          visitedTables[join.alias] = join;\n\n          baseQuery = Converter.joinClause(baseQuery, join);\n        }\n      }\n    }\n\n    return [ baseQuery ];\n  }\n\n  whereClause(query, boundingBox, search, options = {}) {\n    const systemParts = [];\n    options = {...query.options || {}, ...options};\n\n    const filterNode = this.nodeForCondition(query.filter, options);\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(query, boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(query, search));\n    }\n\n    systemParts.push(this.nodeForExpression(query.dateFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.statusFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.projectFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.assignmentFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.changesetFilter, options));\n\n    for (const item of query.columnSettings.columns) {\n      if (item.hasFilter) {\n        const expression = this.createExpressionForColumnFilter(item.filter, options);\n\n        if (expression) {\n          systemParts.push(expression);\n        }\n      }\n\n      if (item.search) {\n        if (item.column.isArray || item.column.isDate || item.column.isTime || item.column.isNumber) {\n          systemParts.push(AExpr(8, '~~*', TypeCast(TypeName('text'), columnRef(item.column)),\n                                          AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        } else {\n          systemParts.push(AExpr(8, '~~*', columnRef(item.column),\n                                          AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        }\n      }\n\n      if (item.expression.isValid) {\n        systemParts.push(this.nodeForExpression(item.expression, options));\n      }\n\n      if (item.range.isValid) {\n        systemParts.push(this.nodeForExpression(item.range, options));\n      }\n    }\n\n    if (options.expressions) {\n      systemParts.push.apply(systemParts, options.expressions);\n    }\n\n    const expressions = systemParts.filter(o => o != null);\n\n    if (filterNode && expressions.length) {\n      return BoolExpr(0, [ filterNode, ...expressions ]);\n    } else if (expressions.length) {\n      return BoolExpr(0, [ ...expressions ]);\n    }\n\n    return filterNode;\n  }\n\n  static joinClause(baseQuery, {inner, tableName, alias, sourceColumn, joinColumn, sourceTableName, rarg}) {\n    return JoinExpr(inner ? 0 : 1,\n                    baseQuery,\n                    rarg || RangeVar(tableName, Alias(alias)),\n                    AExpr(0, '=', ColumnRef(sourceColumn, sourceTableName || 'records'), ColumnRef(joinColumn, alias)));\n  }\n\n  static duplicateResTargetWithExactName(query, targetList, column, exactName) {\n    let resTarget = Converter.findResTarget(query, column);\n\n    // If a column is referenced more than once don't add it again\n    for (const existing of targetList) {\n      if (existing.ResTarget.name === exactName) {\n        return;\n      }\n    }\n\n    // If we found a matching restarget, copy the entire node and give it a new name\n    if (resTarget) {\n      resTarget = JSON.parse(JSON.stringify(resTarget));\n      resTarget.ResTarget.name = exactName;\n    } else {\n      resTarget = ResTarget(ColumnRef(column.columnName, column.source), exactName);\n    }\n\n    targetList.push(resTarget);\n  }\n\n  static findResTarget(query, column) {\n    // UNION's don't have targetList's\n    if (!query.ast.SelectStmt.targetList) {\n      return null;\n    }\n\n    // look for any A_Star nodes, a SELECT * modifies how we process the res targets. If there's\n    // an A_Star node in the targetList, it means that we can't just get the column by index because\n    // the * might expand to columns that cause the indexes to be different.\n    const hasStar = query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget &&\n             target.ResTarget.val &&\n             target.ResTarget.val.ColumnRef &&\n             target.ResTarget.val.ColumnRef.fields &&\n             target.ResTarget.val.ColumnRef.fields[0] &&\n             target.ResTarget.val.ColumnRef.fields[0].A_Star;\n    });\n\n    // the simple case is when there is no * in the query\n    if (!hasStar && query.ast.SelectStmt.targetList.length === query.schema.columns.length) {\n      return query.ast.SelectStmt.targetList[column.index];\n    }\n\n    // Find the ResTarget node by name, or else return null, which means the column\n    // must be coming from a * node and we can just use a simple ResTarget + ColumnRef\n    return query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget.name === column.name;\n    });\n  }\n\n  formQueryRangeVar(query) {\n    const full = query.full ? '/_full' : '';\n\n    if (query.repeatableKey) {\n      return RangeVar(query.form.id + '/' + query.repeatableKey + full, Alias('records'));\n    }\n\n    return RangeVar(query.form.id + full, Alias('records'));\n  }\n\n  createExpressionForColumnFilter(filter, options) {\n    let expression = null;\n\n    if (filter === options.except) {\n      return null;\n    }\n\n    if (filter.hasValues) {\n      let hasNull = false;\n      const values = [];\n\n      filter.value.forEach(v => {\n        if (v != null) {\n          values.push(v);\n        } else {\n          hasNull = true;\n        }\n      });\n\n      if (values.length) {\n        if (filter.column.isArray) {\n          expression = this.AnyOf(filter.column, values);\n        } else if (filter.column.element && filter.column.element.isCalculatedElement && filter.column.element.display.isDate) {\n          expression = this.In(filter.column, values.map((value) => {\n            return new Date(value).getTime() / 1000;\n          }));\n        } else {\n          expression = this.In(filter.column, values);\n        }\n\n        if (hasNull) {\n          expression = BoolExpr(1, [ NullTest(0, columnRef(filter.column)), expression ]);\n        }\n      } else if (hasNull) {\n        expression = NullTest(0, columnRef(filter.column));\n      }\n    } else if (filter.isEmptySet) {\n      // add 1 = 0 clause to return 0 rows\n      expression = AExpr(0, '=', AConst(IntegerValue(1)), AConst(IntegerValue(0)));\n    }\n\n    return expression;\n  }\n\n  boundingBoxFilter(query, boundingBox) {\n    const [xmin, ymin, xmax, ymax] = boundingBox;\n\n    const columnName = query.ast ? '__geometry' : '_geometry';\n\n    // if the east value is less than the west value, the bbox spans the 180 meridian.\n    // Split the box into 2 separate boxes on either side of the meridian and use\n    // an OR statement in the where clause so records on either side of the meridian\n    // will be returned.\n    if (xmax < xmin) {\n      const box1 = [ xmin, ymin, 180, ymax ];\n      const box2 = [ -180, ymin, xmax, ymax ];\n\n      const boxes = [ this.geometryQuery(columnName, box1),\n                      this.geometryQuery(columnName, box2) ];\n\n      return BoolExpr(1, boxes);\n    }\n\n    return this.geometryQuery(columnName, boundingBox);\n  }\n\n  geometryQuery(columnName, boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    return AExpr(0, '&&', ColumnRef(columnName), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%').replace(/_/g, '\\\\_%');\n  }\n\n  searchFilter(query, search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    // if it's a fully custom SQL statement, use a simpler form with no index\n    if (query.ast) {\n      return AExpr(8, '~~*', TypeCast(TypeName('text'), ColumnRef('records')),\n                   AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n    }\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery('english', term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  summaryWhereClause(query, columnSetting, {boundingBox, searchFilter}) {\n    const expressions = [];\n\n    const converters = {\n      [AggregateType.Empty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.NotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentEmpty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentNotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      }\n    };\n\n    const expressionConverter = converters[columnSetting.summary.aggregate];\n\n    if (expressionConverter) {\n      expressions.push(expressionConverter());\n    }\n\n    return this.whereClause(query, boundingBox, searchFilter, {expressions});\n  }\n\n  summaryTargetList(query, columnSetting) {\n    const simpleFunctionResTarget = (funcName, param) => {\n      return () => {\n        return [ ResTarget(FuncCall(funcName, [ param || columnRef(columnSetting.column) ]), 'value') ];\n      };\n    };\n\n    const converter = {\n      [AggregateType.Sum.name]: simpleFunctionResTarget('sum'),\n      [AggregateType.Average.name]: simpleFunctionResTarget('avg'),\n      [AggregateType.Min.name]: simpleFunctionResTarget('min'),\n      [AggregateType.Max.name]: simpleFunctionResTarget('max'),\n      [AggregateType.StdDev.name]: simpleFunctionResTarget('stddev'),\n      [AggregateType.Histogram.name]: simpleFunctionResTarget('count'),\n      [AggregateType.Empty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.NotEmpty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.Unique.name]: () => {\n        return [ ResTarget(FuncCall('count', [ columnRef(columnSetting.column) ], {agg_distinct: true}), 'value') ];\n      },\n      [AggregateType.PercentEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentNotEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentUnique.name]: simpleFunctionResTarget('count')\n    };\n\n    return converter[columnSetting.summary.aggregate]();\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    if (expression === options.except) {\n      return null;\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.DateBetween.name]: this.BetweenConverter,\n      [OperatorType.DateNotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast7Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast30Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast90Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    return converter[expression.operator](expression, options);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    return NullTest(1, columnRef(expression.column));\n  }\n\n  EmptyConverter = (expression) => {\n    return NullTest(0, columnRef(expression.column));\n  }\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options, expression.column.isDateTime).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options, expression.column.isDateTime).endOf('day'));\n    }\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options, expression.column.isDateTime).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options, expression.column.isDateTime).endOf('day'));\n    }\n\n    return this.NotBetween(expression.column, value1, value2);\n  }\n\n  InConverter = (expression) => {\n    return this.In(expression.column, expression.arrayValue);\n  }\n\n  NotInConverter = (expression) => {\n    return this.NotIn(expression.column, expression.arrayValue);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return this.ConstValue(expression.column, expression.scalarValue);\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n\n    return null;\n  }\n\n  TextNotMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '!~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n    return null;\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    return this.AnyOf(expression.column, expression.arrayValue);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '@>', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    const a = AExpr(0, '<@', columnRef(expression.column),\n                    values);\n\n    const b = AExpr(0, '@>', columnRef(expression.column),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ this.ConstValue(expression.column, expression.scalarValue) ]);\n\n    return AExpr(0, '@@', columnRef(expression.column),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const now = this.GetDate(null, options, true);\n\n    const range = calculateDateRange(expression.operator, expression.value, now);\n\n    const value1 = this.ConvertDateValue(range[0]);\n    const value2 = this.ConvertDateValue(range[1]);\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetween = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(11, 'NOT BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '<', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '>', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  AnyOf = (column, values) => {\n    const arrayValues = AArrayExpr(values.map(v => this.ConstValue(column, v)));\n\n    return AExpr(0, '&&', columnRef(column), arrayValues);\n  }\n\n  In = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '=', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(0, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(0, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  NotIn = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '<>', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(1, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(1, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  Between = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(10, 'BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '>=', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '<=', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  ConstValue = (column, value) => {\n    if (value == null) {\n      return null;\n    }\n\n    if (column.isInteger) {\n      return AConst(IntegerValue(value));\n    }\n\n    if (column.isNumber) {\n      return AConst(FloatValue(value));\n    }\n\n    return AConst(StringValue(value));\n  }\n\n  GetDate = (date, options, isDateTime) => {\n    date = date || new Date().toISOString();\n\n    if (!isDateTime) {\n      // the `date` value comes in as the string \"2017-11-12 23:59:59\". We want it to be interpreted as UTC for the\n      // purposes of the SQL query generation. So we convert the local timestamp to a UTC one. We don't care if it's\n      // in a different timezone, we just need to make sure the date component of the timestamp is identical to the\n      // value stored in the date field. We are effectively disregarding the time component of the timestamp.\n      return moment(date.replace(' ', 'T') + 'Z').utc();\n    }\n\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    return moment.tz(date, timeZone);\n  }\n\n  ConvertDateValue = (date) => {\n    if (date) {\n      return date.clone().toISOString();\n    }\n    return null;\n  }\n\n  ConvertToText = (column) => {\n    if (column.isDate || column.isTime || column.isArray) {\n      return TypeCast(TypeName('text'), columnRef(column));\n    }\n\n    return columnRef(column);\n  }\n\n  IsValidRegExp = (string) => {\n    try {\n      return !!(new RegExp(string));\n    } catch (ex) {\n      return false;\n    }\n  }\n}\n"],"file":"converter.js"}