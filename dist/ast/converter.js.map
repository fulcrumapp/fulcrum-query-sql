{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../src/ast/converter.js"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment-timezone';\nimport _ from 'lodash';\n\nimport { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         BooleanValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport { AggregateType } from '../aggregate';\n\nconst MAX_DISTINCT_VALUES = 1000;\nconst MAX_TILE_RECORDS = 1000;\n\nconst columnRef = (column) => {\n  return column.isSQL ? ColumnRef(column?.id, column.source)\n                      : ColumnRef(column.columnName, column.source);\n};\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort, boundingBox);\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, { searchFilter }, maxTileRecords, sorting = {}) {\n    let sortClause = null;\n    let targetList = null;\n\n    if (query.ast) {\n      const sort = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n      targetList = [\n        ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__id'),\n        ResTarget(ColumnRef('__geometry'))\n      ];\n    } else {\n      const statusColumn = query.schema.repeatable ? '_record_status' : '_status';\n\n      targetList = [\n        ResTarget(ColumnRef(query.schema.repeatable ? '_child_record_id' : '_record_id'), 'id'),\n        ResTarget(ColumnRef('_geometry'), 'geometry'),\n        ResTarget(ColumnRef(statusColumn), 'status'),\n        ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n      ];\n\n      if (query.schema.repeatable) {\n        targetList.push(ResTarget(ColumnRef('_record_id'), 'record_id'));\n        targetList.push(ResTarget(ColumnRef('_parent_id'), 'parent_id'));\n      }\n    }\n\n    if (sorting && sorting.field && sorting.direction) {\n      if (sorting.field.startsWith('_')) {\n        targetList.push(ResTarget(ColumnRef(sorting.field), 'sorting_field'));\n      } else {\n        targetList.push(ResTarget(TypeCast(TypeName('text'), AConst(StringValue(sorting.field))), 'sorting_field'));\n      }\n      sortClause = [(SortBy(ColumnRef('sorting_field'), sorting.direction, 0))];\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    const maxTileLimit = (maxTileRecords > 0) ? maxTileRecords : MAX_TILE_RECORDS;\n\n    const limitCount = this.limitCount(maxTileLimit);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitCount});\n  }\n\n  toHistogramAST(query, {column, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const subLinkColumn = (col, table) => {\n      return SubLink(4, SelectStmt({\n        targetList: [ ResTarget(ColumnRef(col)) ],\n        fromClause: [ RangeVar(table) ]\n      }));\n    };\n\n    const expr = (lhs, op, rhs) => {\n      return AExpr(0, op, lhs, rhs);\n    };\n\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(expr(ColumnRef('series', 'series'),\n                               '-',\n                               AConst(IntegerValue(1))),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_min'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(ColumnRef('series', 'series'),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_max'),\n\n      ResTarget(subLinkColumn('range', '__stats'), 'range'),\n      ResTarget(subLinkColumn('bucket_width', '__stats'), 'bucket_width')\n    ];\n\n    const withClause = this.histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    console.log(\"in the toDistinctValuesAST function\");\n    console.log(queries);\n    console.log(options);\n\n    if (!options.column || !options.column.id) {\n      throw new Error(\"Invalid or missing column options\");\n    }\n    const valueColumn = query.ast ? ColumnRef(options.column.id) : columnRef(options.column);\n\n    let targetList = null;\n\n    const isLinkedRecord = options.column.element && options.column.element.isRecordLinkElement;\n\n    if (isLinkedRecord) {\n      targetList = [ ResTarget(ColumnRef('linked_record_id', '__linked_join'), 'value') ];\n    } else if (options.column.isArray && options.unnestArrays !== false) {\n      targetList = [ ResTarget(FuncCall('unnest', [ valueColumn ]), 'value') ];\n    } else if (options.column.element && options.column.element.isCalculatedElement && options.column.element.display.isDate) {\n      // SELECT pg_catalog.timezone('UTC', to_timestamp(column_name))::date\n\n      const timeZoneCast = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('timezone') ], [ AConst(StringValue('UTC')), param ]);\n      };\n\n      const toTimestamp = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('to_timestamp') ], [ param ]);\n      };\n\n      targetList = [ ResTarget(TypeCast(TypeName('date'), timeZoneCast(toTimestamp(valueColumn))), 'value') ];\n    } else {\n      targetList = [ ResTarget(valueColumn, 'value') ];\n    }\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    if (isLinkedRecord) {\n      targetList.push(ResTarget(ColumnRef('__title', '__linked'), 'label'));\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (options.column.join) {\n      joins.push(options.column.join);\n    }\n\n    if (isLinkedRecord) {\n      joins.push({inner: false,\n                  tableName: `${query.form.id}/${options.column.element.key}`,\n                  alias: '__linked_join',\n                  sourceColumn: '_record_id',\n                  joinColumn: 'source_record_id'});\n\n      const subQuery = SelectStmt({\n        targetList: [ ResTarget(ColumnRef('_title'), '__title'),\n                      ResTarget(ColumnRef('_record_id'), '__record_id') ],\n        fromClause: [ RangeVar(`${options.column.element.form.id}`) ]\n      });\n\n      const linkedSubselect = RangeSubselect(subQuery, Alias('__linked'));\n\n      joins.push({inner: false,\n                  rarg: linkedSubselect,\n                  alias: '__linked',\n                  sourceTableName: '__linked_join',\n                  sourceColumn: 'linked_record_id',\n                  joinColumn: '__record_id'});\n    }\n\n    const fromClause = this.fromClause(query, joins, [ options.column ]);\n\n    // const whereClause = null; // options.all ? null : this.whereClause(query);\n    // TODO(zhm) need to pass the bbox and search here?\n    const whereClause = this.whereClause(query, null, null, options);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    if (isLinkedRecord) {\n      groupClause.push(AConst(IntegerValue(3)));\n    }\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    if (isLinkedRecord) {\n      sortClause.push(SortBy(AConst(IntegerValue(3)), 1, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    const limitCount = this.limitCount(MAX_DISTINCT_VALUES);\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause, limitCount});\n  }\n\n  toSummaryAST(query, columnSetting, {boundingBox, searchFilter}) {\n    if (columnSetting.summary.aggregate === AggregateType.Histogram.name) {\n      const histogramAttributes = {\n        column: columnSetting.column,\n        bucketSize: 12,\n        type: columnSetting.column.isDate ? 'date' : 'number',\n        sort: null,\n        boundingBox,\n        searchFilter\n      };\n\n      return this.toHistogramAST(query, histogramAttributes);\n    }\n\n    const targetList = this.summaryTargetList(query, columnSetting);\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (columnSetting.column.join) {\n      joins.push(columnSetting.column.join);\n    }\n\n    const fromClause = this.fromClause(query, joins, [ columnSetting.column ]);\n\n    const whereClause = this.summaryWhereClause(query, columnSetting, {boundingBox, searchFilter});\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), columnRef(column))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), columnRef(column)), 'value') ];\n    }\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const recordsFromClause = this.fromClause(query, joins, [ column ]);\n\n    const recordsWhere = this.whereClause(query, boundingBox, searchFilter);\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause, whereClause: recordsWhere});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(AExpr(0, '-', FuncCall('max', [ ColumnRef('value') ]), FuncCall('min', [ ColumnRef('value') ])), 'range'),\n      ResTarget(AExpr(0, '/', AExpr(0, '-', TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('max', [ ColumnRef('value') ])),\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('min', [ ColumnRef('value') ]))),\n      AConst(FloatValue(bucketSize))), 'bucket_width')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  toSchemaAST(query, {schemaOnly} = {}) {\n    // wrap the query in a subquery with 1=0\n\n    const targetList = [ ResTarget(ColumnRef(AStar())) ];\n    const fromClause = [ RangeSubselect(query, Alias('wrapped')) ];\n    const whereClause = schemaOnly ? AExpr(0, '=', AConst(IntegerValue(0)), AConst(IntegerValue(1)))\n                                   : null;\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort, boundingBox) {\n    const list = [\n      ResTarget(ColumnRef(AStar(), 'records'))\n    ];\n\n    const subJoinColumns = query.joinColumnsWithSorting;\n\n    if (subJoinColumns.indexOf(query.schema.createdByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.createdByColumn.join.alias), query.schema.createdByColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.updatedByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.updatedByColumn.join.alias), query.schema.updatedByColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.assignedToColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.assignedToColumn.join.alias), query.schema.assignedToColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.projectColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.projectColumn.join.alias), query.schema.projectColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.recordSeriesColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('rrule', query.schema.recordSeriesColumn.join.alias), query.schema.recordSeriesColumn.id));\n      list.push(ResTarget(ColumnRef('enabled', query.schema.recordSeriesColumn.join.alias), query.schema.recordSeriesColumn.id));\n    }\n\n    list.push(ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__row_number'));\n\n    return list;\n  }\n\n  fromClause(query, leftJoins = [], exactColumns) {\n    let baseQuery = null;\n\n    if (query.ast) {\n      let queryAST = query.ast;\n\n      const referencedColumns = query.referencedColumns.concat(exactColumns || []);\n\n      // If there's an `exactColumn`, pick it out specifically with a guaranteed unique alias so it can be\n      // referenced with certainty in outer queries. The following is an oversimplified example of the problem:\n      //\n      // if `id` is part of the table and needs to be references in the outer query, it must be called out specifically:\n      //\n      // INVALID:\n      //   SELECT * FROM(SELECT *, *, * FROM table) WHERE id = ...\n      //\n      // VALID:\n      //   SELECT * FROM(SELECT *, *, *, id AS __value FROM table) WHERE __value = ...\n      //\n      // Given arbitrary subqueries, we must be able to reference columns in them exactly even when there are duplicates.\n      // We can't assume they're all simple ColumnRef's either. Some ResTarget's might be entire graphs of expressions which\n      // needs to be duplicated to ensure uniqueness.\n      if (referencedColumns.length) {\n        queryAST = JSON.parse(JSON.stringify(queryAST));\n\n        for (const column of referencedColumns) {\n          Converter.duplicateResTargetWithExactName(query, queryAST.SelectStmt.targetList,\n                                                    column, column.id);\n        }\n      }\n\n      return [ RangeSubselect(queryAST, Alias('records')) ];\n    }\n\n    baseQuery = this.formQueryRangeVar(query);\n\n    const visitedTables = {};\n\n    if (leftJoins) {\n      for (const join of leftJoins) {\n        if (!visitedTables[join.alias]) {\n          visitedTables[join.alias] = join;\n\n          baseQuery = Converter.joinClause(baseQuery, join);\n        }\n      }\n    }\n\n    return [ baseQuery ];\n  }\n\n  whereClause(query, boundingBox, search, options = {}) {\n    const systemParts = [];\n    options = { ...(query.options || {}), ...options };\n\n    const filterNode = this.nodeForCondition(query.filter, options);\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(query, boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(query, search));\n    }\n\n    systemParts.push(this.nodeForExpression(query.dateFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.statusFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.projectFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.assignmentFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.changesetFilter, options));\n\n    for (const item of query.columnSettings.columns) {\n      if (item.hasFilter) {\n        const expression = this.createExpressionForColumnFilter(item.filter, options);\n        if (expression) {\n          systemParts.push(expression);\n        }\n      }\n\n      if (item.search) {\n\n        if (item.column.element.isRecordLinkElement) {\n          const formId = item.column.element.form.id;\n          console.log(formId);\n          console.log(\"is it undefined????\", formId === undefined)\n          if (formId) {\n            systemParts.push(SubLink(\n              0,\n              SelectStmt({\n                targetList: [ResTarget(AConst(IntegerValue(1)))],\n                fromClause: [RangeVar(item.column.element.form.id)],\n                whereClause: BoolExpr(0, [\n                  AExpr(1, '=', ColumnRef('_record_id', formId), columnRef(item.column)),\n                  AExpr(8, '~~*', ColumnRef('_title', formId), AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))),\n                ]),\n              }),\n            ));\n          }\n        } else if (item.column.isArray || item.column.isDate || item.column.isTime || item.column.isNumber) {\n          systemParts.push(AExpr(8, '~~*', TypeCast(TypeName('text'), columnRef(item.column)),\n            AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        } else {\n          systemParts.push(AExpr(8, '~~*', columnRef(item.column),\n            AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        }\n      }\n\n      if (item.expression.isValid) {\n        systemParts.push(this.nodeForExpression(item.expression, options));\n      }\n\n      if (item.range.isValid) {\n        systemParts.push(this.nodeForExpression(item.range, options));\n      }\n    }\n\n    if (options.expressions) {\n      systemParts.push.apply(systemParts, options.expressions);\n    }\n\n    const expressions = systemParts.filter(o => o != null);\n\n    if (filterNode && expressions.length) {\n      return BoolExpr(0, [filterNode, ...expressions]);\n    } else if (expressions.length) {\n      return BoolExpr(0, [...expressions]);\n    }\n\n    return filterNode;\n  }\n\n  static joinClause(baseQuery, {inner, tableName, alias, sourceColumn, joinColumn, sourceTableName, rarg, ast}) {\n    return JoinExpr(inner ? 0 : 1,\n                    baseQuery,\n                    rarg || RangeVar(tableName, Alias(alias)),\n                    ast ? ast : AExpr(0, '=', ColumnRef(sourceColumn, sourceTableName || 'records'), ColumnRef(joinColumn, alias)));\n  }\n\n  static duplicateResTargetWithExactName(query, targetList, column, exactName) {\n    let resTarget = Converter.findResTarget(query, column);\n\n    // If a column is referenced more than once don't add it again\n    for (const existing of targetList) {\n      if (existing.ResTarget.name === exactName) {\n        return;\n      }\n    }\n\n    // If we found a matching restarget, copy the entire node and give it a new name\n    if (resTarget) {\n      resTarget = JSON.parse(JSON.stringify(resTarget));\n      resTarget.ResTarget.name = exactName;\n    } else {\n      resTarget = ResTarget(ColumnRef(column.columnName, column.source), exactName);\n    }\n\n    targetList.push(resTarget);\n  }\n\n  static findResTarget(query, column) {\n    // UNION's don't have targetList's\n    if (!query.ast.SelectStmt.targetList) {\n      return null;\n    }\n\n    // look for any A_Star nodes, a SELECT * modifies how we process the res targets. If there's\n    // an A_Star node in the targetList, it means that we can't just get the column by index because\n    // the * might expand to columns that cause the indexes to be different.\n    const hasStar = query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget &&\n             target.ResTarget.val &&\n             target.ResTarget.val.ColumnRef &&\n             target.ResTarget.val.ColumnRef.fields &&\n             target.ResTarget.val.ColumnRef.fields[0] &&\n             target.ResTarget.val.ColumnRef.fields[0].A_Star;\n    });\n\n    // the simple case is when there is no * in the query\n    if (!hasStar && query.ast.SelectStmt.targetList.length === query.schema.columns.length) {\n      return query.ast.SelectStmt.targetList[column.index];\n    }\n\n    // Find the ResTarget node by name, or else return null, which means the column\n    // must be coming from a * node and we can just use a simple ResTarget + ColumnRef\n    return query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget.name === column.name;\n    });\n  }\n\n  formQueryRangeVar(query) {\n    const full = query.full ? '/_full' : '';\n\n    if (query.repeatableKey) {\n      return RangeVar(query.form.id + '/' + query.repeatableKey + full, Alias('records'));\n    }\n\n    return RangeVar(query.form.id + full, Alias('records'));\n  }\n\n  createExpressionForColumnFilter(filter, options) {\n    let expression = null;\n\n    if (filter === options.except) {\n      return null;\n    }\n\n    if (filter.hasValues) {\n      let hasNull = false;\n      const values = [];\n\n      filter.value.forEach(v => {\n        if (v != null) {\n          values.push(v);\n        } else {\n          hasNull = true;\n        }\n      });\n\n      if (values.length) {\n        if (filter.column.isArray) {\n          expression = this.AnyOf(filter.column, values);\n        } else if (filter.column.element && filter.column.element.isCalculatedElement && filter.column.element.display.isDate) {\n          expression = this.In(filter.column, values.map((value) => {\n            return new Date(value).getTime() / 1000;\n          }));\n        } else {\n          expression = this.In(filter.column, values);\n        }\n\n        if (hasNull) {\n          expression = BoolExpr(1, [ NullTest(0, columnRef(filter.column)), expression ]);\n        }\n      } else if (hasNull) {\n        expression = NullTest(0, columnRef(filter.column));\n      }\n    } else if (filter.isEmptySet) {\n      // add 1 = 0 clause to return 0 rows\n      expression = AExpr(0, '=', AConst(IntegerValue(1)), AConst(IntegerValue(0)));\n    }\n\n    return expression;\n  }\n\n  boundingBoxFilter(query, boundingBox) {\n    const [xmin, ymin, xmax, ymax] = boundingBox;\n\n    const columnName = query.ast ? '__geometry' : '_geometry';\n\n    // if the east value is less than the west value, the bbox spans the 180 meridian.\n    // Split the box into 2 separate boxes on either side of the meridian and use\n    // an OR statement in the where clause so records on either side of the meridian\n    // will be returned.\n    if (xmax < xmin) {\n      const box1 = [ xmin, ymin, 180, ymax ];\n      const box2 = [ -180, ymin, xmax, ymax ];\n\n      const boxes = [ this.geometryQuery(columnName, box1),\n                      this.geometryQuery(columnName, box2) ];\n\n      return BoolExpr(1, boxes);\n    }\n\n    return this.geometryQuery(columnName, boundingBox);\n  }\n\n  geometryQuery(columnName, boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    return AExpr(0, '&&', ColumnRef(columnName), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%').replace(/_/g, '\\\\_%');\n  }\n\n  searchFilter(query, search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    // if it's a fully custom SQL statement, use a simpler form with no index\n    if (query.ast) {\n      return AExpr(8, '~~*', TypeCast(TypeName('text'), ColumnRef('records')),\n                   AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n    }\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery('english', term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  summaryWhereClause(query, columnSetting, {boundingBox, searchFilter}) {\n    const expressions = [];\n\n    const converters = {\n      [AggregateType.Empty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.NotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentEmpty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentNotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      }\n    };\n\n    const expressionConverter = converters[columnSetting.summary.aggregate];\n\n    if (expressionConverter) {\n      expressions.push(expressionConverter());\n    }\n\n    return this.whereClause(query, boundingBox, searchFilter, {expressions});\n  }\n\n  summaryTargetList(query, columnSetting) {\n    const simpleFunctionResTarget = (funcName, param) => {\n      return () => {\n        return [ ResTarget(FuncCall(funcName, [ param || columnRef(columnSetting.column) ]), 'value') ];\n      };\n    };\n\n    const converter = {\n      [AggregateType.Sum.name]: simpleFunctionResTarget('sum'),\n      [AggregateType.Average.name]: simpleFunctionResTarget('avg'),\n      [AggregateType.Min.name]: simpleFunctionResTarget('min'),\n      [AggregateType.Max.name]: simpleFunctionResTarget('max'),\n      [AggregateType.StdDev.name]: simpleFunctionResTarget('stddev'),\n      [AggregateType.Histogram.name]: simpleFunctionResTarget('count'),\n      [AggregateType.Empty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.NotEmpty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.Unique.name]: () => {\n        return [ ResTarget(FuncCall('count', [ columnRef(columnSetting.column) ], {agg_distinct: true}), 'value') ];\n      },\n      [AggregateType.PercentEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentNotEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentUnique.name]: simpleFunctionResTarget('count')\n    };\n\n    return converter[columnSetting.summary.aggregate]();\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    if (expression === options.except) {\n      return null;\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.DateBetween.name]: this.BetweenConverter,\n      [OperatorType.DateNotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayIsContainedIn.name]: this.ArrayIsContainedIn,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast7Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast30Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast90Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    const mergedOptions = { ...options, ..._.omitBy(expression.options, _.isNull) };\n\n    return converter[expression.operator](expression, mergedOptions);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    if (expression.column.isArray && expression.column.part === 'captions') {\n      const nullTest = NullTest(1, columnRef(expression.column));\n      const arrayLen = FuncCall('length', [FuncCall('array_to_string', [columnRef(expression.column), AConst(StringValue(''))])]);\n      const lenTest = AExpr(0, '>', arrayLen, AConst(IntegerValue(0)));\n      return BoolExpr(0, [nullTest, lenTest]);\n    }\n\n    return NullTest(1, columnRef(expression.column));\n  };\n\n  EmptyConverter = (expression) => {\n    if (expression.column.isArray && expression.column.part === 'captions') {\n      const nullTest = NullTest(0, columnRef(expression.column));\n      const arrayPos = CoalesceExpr([FuncCall('array_position', [columnRef(expression.column), StringValue('NULL')]), AConst(IntegerValue(0))]);\n      const lenTest = AExpr(0, '>', arrayPos, AConst(IntegerValue(0)));\n      return BoolExpr(1, [nullTest, lenTest]);\n    }\n\n    return NullTest(0, columnRef(expression.column));\n  };\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(expression, this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(expression, this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(expression, this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(expression, this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.NotBetween(expression.column, value1, value2);\n  }\n\n  InConverter = (expression) => {\n    return this.In(expression.column, expression.arrayValue);\n  }\n\n  NotInConverter = (expression) => {\n    return this.NotIn(expression.column, expression.arrayValue);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return this.ConstValue(expression.column, expression.scalarValue);\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n\n    return null;\n  }\n\n  TextNotMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '!~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n    return null;\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    return this.AnyOf(expression.column, expression.arrayValue);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '@>', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayIsContainedIn = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '<@', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    const a = AExpr(0, '<@', columnRef(expression.column),\n                    values);\n\n    const b = AExpr(0, '@>', columnRef(expression.column),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ this.ConstValue(expression.column, expression.scalarValue) ]);\n\n    return AExpr(0, '@@', columnRef(expression.column),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const now = this.GetDate(null, options);\n\n    const range = calculateDateRange(expression.column, expression.operator, expression.value, now);\n\n    const value1 = this.ConvertDateValue(expression, range[0]);\n    const value2 = this.ConvertDateValue(expression, range[1]);\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetween = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(11, 'NOT BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '<', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '>', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  AnyOf = (column, values) => {\n    const arrayValues = AArrayExpr(values.map(v => this.ConstValue(column, v)));\n\n    return AExpr(0, '&&', columnRef(column), arrayValues);\n  }\n\n  In = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '=', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(0, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(0, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  NotIn = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '<>', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(1, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(1, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  Between = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(10, 'BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '>=', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '<=', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  ConstValue = (column, value) => {\n    if (value == null) {\n      return null;\n    }\n\n    if (column.isInteger) {\n      return AConst(IntegerValue(value));\n    }\n\n    if (column.isNumber) {\n      return AConst(FloatValue(value));\n    }\n\n    return AConst(StringValue(value));\n  }\n\n  GetDate = (dateString, options) => {\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    return moment.tz(dateString ?? new Date().toISOString(), timeZone);\n  }\n\n  ConvertDateValue = (expression, date) => {\n    if (date) {\n      return expression.column.isDateTime ? date.toISOString() : date.format('YYYY-MM-DD');\n    }\n    return null;\n  }\n\n  ConvertToText = (column) => {\n    if (column.isDate || column.isTime || column.isArray) {\n      return TypeCast(TypeName('text'), columnRef(column));\n    }\n\n    return columnRef(column);\n  }\n\n  IsValidRegExp = (string) => {\n    try {\n      return !!(new RegExp(string));\n    } catch (ex) {\n      return false;\n    }\n  }\n}\n"]}