{"version":3,"file":"converter.js","names":["MAX_DISTINCT_VALUES","MAX_TILE_RECORDS","columnRef","column","isSQL","ColumnRef","id","source","columnName","Converter","type","condition","options","args","nodeForExpressions","expressions","length","BoolExpr","BooleanConverter","expression","NullTest","BinaryConverter","value1","value2","isDateOperator","ConvertDateValue","GetDate","isDateTime","startOf","endOf","Between","NotBetween","In","arrayValue","NotIn","kind","operator","AExpr","ConstValue","scalarValue","name","ConvertToText","AConst","StringValue","escapeLikePercent","IsValidRegExp","AnyOf","values","AArrayExpr","map","v","a","b","rhs","FuncCall","now","range","calculateDateRange","value","arrayValues","hasNull","inValues","forEach","push","isInteger","IntegerValue","isNumber","FloatValue","date","Date","toISOString","moment","replace","utc","timeZone","tz","guess","clone","isDate","isTime","isArray","TypeCast","TypeName","string","RegExp","ex","toAST","query","sort","pageSize","pageIndex","boundingBox","searchFilter","targetList","joins","joinColumnsWithSorting","o","join","fromClause","whereClause","sortClause","limitOffset","limitCount","SelectStmt","toCountAST","ResTarget","joinColumns","toTileAST","ast","SortBy","over","WindowDef","statusColumn","schema","repeatable","form","toHistogramAST","bucketSize","subLinkColumn","col","table","SubLink","RangeVar","expr","lhs","op","CoalesceExpr","withClause","histogramWithClause","seriesFunctionSublinkSelect","seriesFunctionArgs","seriesFunctionCall","seriesFunction","RangeFunction","Alias","bucketWidthFunctionCallArgs","bucketsSubqueryTargetList","bucketsSubqueryFromClause","bucketsSubqueryGroupClause","bucketsSubquerySortClause","bucketsSubquery","groupClause","bucketsSubselect","RangeSubselect","joinExpr","JoinExpr","toDistinctValuesAST","valueColumn","isLinkedRecord","element","isRecordLinkElement","unnestArrays","isCalculatedElement","display","timeZoneCast","param","toTimestamp","inner","tableName","key","alias","sourceColumn","joinColumn","subQuery","linkedSubselect","rarg","sourceTableName","by","toSummaryAST","columnSetting","summary","aggregate","AggregateType","Histogram","histogramAttributes","summaryTargetList","summaryWhereClause","recordsTargetList","datePartArgs","recordsFromClause","recordsWhere","recordsSelect","recordsExpr","CommonTableExpr","statsTargetList","statsFromClause","statsSelect","statsExpr","WithClause","toSchemaAST","schemaOnly","AStar","list","subJoinColumns","indexOf","createdByColumn","updatedByColumn","assignedToColumn","projectColumn","recordSeriesColumn","leftJoins","exactColumns","baseQuery","queryAST","referencedColumns","concat","JSON","parse","stringify","duplicateResTargetWithExactName","formQueryRangeVar","visitedTables","joinClause","search","systemParts","filterNode","nodeForCondition","filter","boundingBoxFilter","trim","nodeForExpression","dateFilter","createExpressionForColumnFilter","statusFilter","projectFilter","assignmentFilter","changesetFilter","columnSettings","columns","item","hasFilter","isValid","apply","exactName","resTarget","findResTarget","existing","hasStar","find","target","val","fields","A_Star","index","full","repeatableKey","except","hasValues","getTime","isEmptySet","xmin","ymin","xmax","ymax","box1","box2","boxes","geometryQuery","toTsQuery","dictionary","term","makeTsQueryCall","toLowerCase","terms","split","s","shift","tsQueries","ftsExpression","ilikeExpression","andArgs","converters","Empty","NotEmpty","PercentEmpty","PercentNotEmpty","expressionConverter","simpleFunctionResTarget","funcName","converter","Sum","Average","Min","Max","StdDev","Unique","agg_distinct","PercentUnique","e","ConditionType","And","AndConverter","Or","OrConverter","Not","NotConverter","OperatorType","EmptyConverter","NotEmptyConverter","Equal","EqualConverter","NotEqual","NotEqualConverter","GreaterThan","GreaterThanConverter","GreaterThanOrEqual","GreaterThanOrEqualConverter","LessThan","LessThanConverter","LessThanOrEqual","LessThanOrEqualConverter","BetweenConverter","NotBetweenConverter","InConverter","NotInConverter","TextContain","TextContainConverter","TextNotContain","TextNotContainConverter","TextStartsWith","TextStartsWithConverter","TextEndsWith","TextEndsWithConverter","TextEqual","TextEqualConverter","TextNotEqual","TextNotEqualConverter","TextMatch","TextMatchConverter","TextNotMatch","TextNotMatchConverter","DateEqual","DateNotEqual","DateAfter","DateOnOrAfter","DateBefore","DateOnOrBefore","DateBetween","DateNotBetween","ArrayAnyOf","ArrayAnyOfConverter","ArrayAllOf","ArrayAllOfConverter","ArrayIsContainedIn","ArrayEqual","ArrayEqualConverter","Search","SearchConverter","DateToday","DynamicDateConverter","DateYesterday","DateTomorrow","DateLast7Days","DateLast30Days","DateLast90Days","DateLastMonth","DateLastYear","DateNextWeek","DateNextMonth","DateNextYear","DateCurrentCalendarWeek","DateCurrentCalendarMonth","DateCurrentCalendarYear","DatePreviousCalendarWeek","DatePreviousCalendarMonth","DatePreviousCalendarYear","DateNextCalendarWeek","DateNextCalendarMonth","DateNextCalendarYear","DateDaysFromNow","DateWeeksFromNow","DateMonthsFromNow","DateYearsFromNow","DateDaysAgo","DateWeeksAgo","DateMonthsAgo","DateYearsAgo"],"sources":["../../src/ast/converter.js"],"sourcesContent":["import { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         BooleanValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport { AggregateType } from '../aggregate';\nimport moment from 'moment-timezone';\n\nconst MAX_DISTINCT_VALUES = 1000;\nconst MAX_TILE_RECORDS = 1000;\n\nconst columnRef = (column) => {\n  return column.isSQL ? ColumnRef(column.id, column.source)\n                      : ColumnRef(column.columnName, column.source);\n};\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort, boundingBox);\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n    \n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, {searchFilter}) {\n    let targetList = null;\n\n    if (query.ast) {\n      const sort = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n      targetList = [\n        ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__id'),\n        ResTarget(ColumnRef('__geometry'))\n      ];\n    } else {\n      const statusColumn = query.schema.repeatable ? '_record_status' : '_status';\n\n      targetList = [\n        ResTarget(ColumnRef(query.schema.repeatable ? '_child_record_id' : '_record_id'), 'id'),\n        ResTarget(ColumnRef('_geometry'), 'geometry'),\n        ResTarget(ColumnRef(statusColumn), 'status'),\n        ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n      ];\n\n      if (query.schema.repeatable) {\n        targetList.push(ResTarget(ColumnRef('_record_id'), 'record_id'));\n        targetList.push(ResTarget(ColumnRef('_parent_id'), 'parent_id'));\n      }\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    const limitCount = this.limitCount(MAX_TILE_RECORDS);\n\n    return SelectStmt({targetList, fromClause, whereClause, limitCount});\n  }\n\n  toHistogramAST(query, {column, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const subLinkColumn = (col, table) => {\n      return SubLink(4, SelectStmt({\n        targetList: [ ResTarget(ColumnRef(col)) ],\n        fromClause: [ RangeVar(table) ]\n      }));\n    };\n\n    const expr = (lhs, op, rhs) => {\n      return AExpr(0, op, lhs, rhs);\n    };\n\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(expr(ColumnRef('series', 'series'),\n                               '-',\n                               AConst(IntegerValue(1))),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_min'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(ColumnRef('series', 'series'),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_max'),\n\n      ResTarget(subLinkColumn('range', '__stats'), 'range'),\n      ResTarget(subLinkColumn('bucket_width', '__stats'), 'bucket_width')\n    ];\n\n    const withClause = this.histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    const valueColumn = query.ast ? ColumnRef(options.column.id) : columnRef(options.column);\n\n    let targetList = null;\n\n    const isLinkedRecord = options.column.element && options.column.element.isRecordLinkElement;\n\n    if (isLinkedRecord) {\n      targetList = [ ResTarget(ColumnRef('linked_record_id', '__linked_join'), 'value') ];\n    } else if (options.column.isArray && options.unnestArrays !== false) {\n      targetList = [ ResTarget(FuncCall('unnest', [ valueColumn ]), 'value') ];\n    } else if (options.column.element && options.column.element.isCalculatedElement && options.column.element.display.isDate) {\n      // SELECT pg_catalog.timezone('UTC', to_timestamp(column_name))::date\n\n      const timeZoneCast = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('timezone') ], [ AConst(StringValue('UTC')), param ]);\n      };\n\n      const toTimestamp = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('to_timestamp') ], [ param ]);\n      };\n\n      targetList = [ ResTarget(TypeCast(TypeName('date'), timeZoneCast(toTimestamp(valueColumn))), 'value') ];\n    } else {\n      targetList = [ ResTarget(valueColumn, 'value') ];\n    }\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    if (isLinkedRecord) {\n      targetList.push(ResTarget(ColumnRef('__title', '__linked'), 'label'));\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (options.column.join) {\n      joins.push(options.column.join);\n    }\n\n    if (isLinkedRecord) {\n      joins.push({inner: false,\n                  tableName: `${query.form.id}/${options.column.element.key}`,\n                  alias: '__linked_join',\n                  sourceColumn: '_record_id',\n                  joinColumn: 'source_record_id'});\n\n      const subQuery = SelectStmt({\n        targetList: [ ResTarget(ColumnRef('_title'), '__title'),\n                      ResTarget(ColumnRef('_record_id'), '__record_id') ],\n        fromClause: [ RangeVar(`${options.column.element.form.id}`) ]\n      });\n\n      const linkedSubselect = RangeSubselect(subQuery, Alias('__linked'));\n\n      joins.push({inner: false,\n                  rarg: linkedSubselect,\n                  alias: '__linked',\n                  sourceTableName: '__linked_join',\n                  sourceColumn: 'linked_record_id',\n                  joinColumn: '__record_id'});\n    }\n\n    const fromClause = this.fromClause(query, joins, [ options.column ]);\n\n    // const whereClause = null; // options.all ? null : this.whereClause(query);\n    // TODO(zhm) need to pass the bbox and search here?\n    const whereClause = this.whereClause(query, null, null, options);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    if (isLinkedRecord) {\n      groupClause.push(AConst(IntegerValue(3)));\n    }\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    if (isLinkedRecord) {\n      sortClause.push(SortBy(AConst(IntegerValue(3)), 1, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    const limitCount = this.limitCount(MAX_DISTINCT_VALUES);\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause, limitCount});\n  }\n\n  toSummaryAST(query, columnSetting, {boundingBox, searchFilter}) {\n    if (columnSetting.summary.aggregate === AggregateType.Histogram.name) {\n      const histogramAttributes = {\n        column: columnSetting.column,\n        bucketSize: 12,\n        type: columnSetting.column.isDate ? 'date' : 'number',\n        sort: null,\n        boundingBox,\n        searchFilter\n      };\n\n      return this.toHistogramAST(query, histogramAttributes);\n    }\n\n    const targetList = this.summaryTargetList(query, columnSetting);\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (columnSetting.column.join) {\n      joins.push(columnSetting.column.join);\n    }\n\n    const fromClause = this.fromClause(query, joins, [ columnSetting.column ]);\n\n    const whereClause = this.summaryWhereClause(query, columnSetting, {boundingBox, searchFilter});\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), columnRef(column))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), columnRef(column)), 'value') ];\n    }\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const recordsFromClause = this.fromClause(query, joins, [ column ]);\n\n    const recordsWhere = this.whereClause(query, boundingBox, searchFilter);\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause, whereClause: recordsWhere});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(AExpr(0, '-', FuncCall('max', [ ColumnRef('value') ]), FuncCall('min', [ ColumnRef('value') ])), 'range'),\n      ResTarget(AExpr(0, '/', AExpr(0, '-', TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('max', [ ColumnRef('value') ])),\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('min', [ ColumnRef('value') ]))),\n      AConst(FloatValue(bucketSize))), 'bucket_width')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  toSchemaAST(query, {schemaOnly} = {}) {\n    // wrap the query in a subquery with 1=0\n\n    const targetList = [ ResTarget(ColumnRef(AStar())) ];\n    const fromClause = [ RangeSubselect(query, Alias('wrapped')) ];\n    const whereClause = schemaOnly ? AExpr(0, '=', AConst(IntegerValue(0)), AConst(IntegerValue(1)))\n                                   : null;\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort, boundingBox) {\n    const list = [\n      ResTarget(ColumnRef(AStar(), 'records'))\n    ];\n\n    const subJoinColumns = query.joinColumnsWithSorting;\n\n    if (subJoinColumns.indexOf(query.schema.createdByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.createdByColumn.join.alias), query.schema.createdByColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.updatedByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.updatedByColumn.join.alias), query.schema.updatedByColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.assignedToColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.assignedToColumn.join.alias), query.schema.assignedToColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.projectColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.projectColumn.join.alias), query.schema.projectColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.recordSeriesColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('rrule', query.schema.recordSeriesColumn.join.alias), query.schema.recordSeriesColumn.id));\n      list.push(ResTarget(ColumnRef('enabled', query.schema.recordSeriesColumn.join.alias), query.schema.recordSeriesColumn.id));\n    }\n\n    list.push(ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__row_number'));\n\n    return list;\n  }\n\n  fromClause(query, leftJoins = [], exactColumns) {\n    let baseQuery = null;\n\n    if (query.ast) {\n      let queryAST = query.ast;\n\n      const referencedColumns = query.referencedColumns.concat(exactColumns || []);\n\n      // If there's an `exactColumn`, pick it out specifically with a guaranteed unique alias so it can be\n      // referenced with certainty in outer queries. The following is an oversimplified example of the problem:\n      //\n      // if `id` is part of the table and needs to be references in the outer query, it must be called out specifically:\n      //\n      // INVALID:\n      //   SELECT * FROM(SELECT *, *, * FROM table) WHERE id = ...\n      //\n      // VALID:\n      //   SELECT * FROM(SELECT *, *, *, id AS __value FROM table) WHERE __value = ...\n      //\n      // Given arbitrary subqueries, we must be able to reference columns in them exactly even when there are duplicates.\n      // We can't assume they're all simple ColumnRef's either. Some ResTarget's might be entire graphs of expressions which\n      // needs to be duplicated to ensure uniqueness.\n      if (referencedColumns.length) {\n        queryAST = JSON.parse(JSON.stringify(queryAST));\n\n        for (const column of referencedColumns) {\n          Converter.duplicateResTargetWithExactName(query, queryAST.SelectStmt.targetList,\n                                                    column, column.id);\n        }\n      }\n\n      return [ RangeSubselect(queryAST, Alias('records')) ];\n    }\n\n    baseQuery = this.formQueryRangeVar(query);\n\n    const visitedTables = {};\n\n    if (leftJoins) {\n      for (const join of leftJoins) {\n        if (!visitedTables[join.alias]) {\n          visitedTables[join.alias] = join;\n\n          baseQuery = Converter.joinClause(baseQuery, join);\n        }\n      }\n    }\n\n    return [ baseQuery ];\n  }\n\n  whereClause(query, boundingBox, search, options = {}) {\n    const systemParts = [];\n    options = {...query.options || {}, ...options};\n\n    const filterNode = this.nodeForCondition(query.filter, options);\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(query, boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(query, search));\n    }\n\n    systemParts.push(this.nodeForExpression(query.dateFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.statusFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.projectFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.assignmentFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.changesetFilter, options));\n\n    for (const item of query.columnSettings.columns) {\n      if (item.hasFilter) {\n        const expression = this.createExpressionForColumnFilter(item.filter, options);\n\n        if (expression) {\n          systemParts.push(expression);\n        }\n      }\n\n      if (item.search) {\n        if (item.column.isArray || item.column.isDate || item.column.isTime || item.column.isNumber) {\n          systemParts.push(AExpr(8, '~~*', TypeCast(TypeName('text'), columnRef(item.column)),\n                                          AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        } else {\n          systemParts.push(AExpr(8, '~~*', columnRef(item.column),\n                                          AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        }\n      }\n\n      if (item.expression.isValid) {\n        systemParts.push(this.nodeForExpression(item.expression, options));\n      }\n\n      if (item.range.isValid) {\n        systemParts.push(this.nodeForExpression(item.range, options));\n      }\n    }\n\n    if (options.expressions) {\n      systemParts.push.apply(systemParts, options.expressions);\n    }\n\n    const expressions = systemParts.filter(o => o != null);\n\n    if (filterNode && expressions.length) {\n      return BoolExpr(0, [ filterNode, ...expressions ]);\n    } else if (expressions.length) {\n      return BoolExpr(0, [ ...expressions ]);\n    }\n\n    return filterNode;\n  }\n\n  static joinClause(baseQuery, {inner, tableName, alias, sourceColumn, joinColumn, sourceTableName, rarg, ast}) {\n    return JoinExpr(inner ? 0 : 1,\n                    baseQuery,\n                    rarg || RangeVar(tableName, Alias(alias)),\n                    ast ? ast : AExpr(0, '=', ColumnRef(sourceColumn, sourceTableName || 'records'), ColumnRef(joinColumn, alias)));\n  }\n\n  static duplicateResTargetWithExactName(query, targetList, column, exactName) {\n    let resTarget = Converter.findResTarget(query, column);\n\n    // If a column is referenced more than once don't add it again\n    for (const existing of targetList) {\n      if (existing.ResTarget.name === exactName) {\n        return;\n      }\n    }\n\n    // If we found a matching restarget, copy the entire node and give it a new name\n    if (resTarget) {\n      resTarget = JSON.parse(JSON.stringify(resTarget));\n      resTarget.ResTarget.name = exactName;\n    } else {\n      resTarget = ResTarget(ColumnRef(column.columnName, column.source), exactName);\n    }\n\n    targetList.push(resTarget);\n  }\n\n  static findResTarget(query, column) {\n    // UNION's don't have targetList's\n    if (!query.ast.SelectStmt.targetList) {\n      return null;\n    }\n\n    // look for any A_Star nodes, a SELECT * modifies how we process the res targets. If there's\n    // an A_Star node in the targetList, it means that we can't just get the column by index because\n    // the * might expand to columns that cause the indexes to be different.\n    const hasStar = query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget &&\n             target.ResTarget.val &&\n             target.ResTarget.val.ColumnRef &&\n             target.ResTarget.val.ColumnRef.fields &&\n             target.ResTarget.val.ColumnRef.fields[0] &&\n             target.ResTarget.val.ColumnRef.fields[0].A_Star;\n    });\n\n    // the simple case is when there is no * in the query\n    if (!hasStar && query.ast.SelectStmt.targetList.length === query.schema.columns.length) {\n      return query.ast.SelectStmt.targetList[column.index];\n    }\n\n    // Find the ResTarget node by name, or else return null, which means the column\n    // must be coming from a * node and we can just use a simple ResTarget + ColumnRef\n    return query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget.name === column.name;\n    });\n  }\n\n  formQueryRangeVar(query) {\n    const full = query.full ? '/_full' : '';\n\n    if (query.repeatableKey) {\n      return RangeVar(query.form.id + '/' + query.repeatableKey + full, Alias('records'));\n    }\n\n    return RangeVar(query.form.id + full, Alias('records'));\n  }\n\n  createExpressionForColumnFilter(filter, options) {\n    let expression = null;\n\n    if (filter === options.except) {\n      return null;\n    }\n\n    if (filter.hasValues) {\n      let hasNull = false;\n      const values = [];\n\n      filter.value.forEach(v => {\n        if (v != null) {\n          values.push(v);\n        } else {\n          hasNull = true;\n        }\n      });\n\n      if (values.length) {\n        if (filter.column.isArray) {\n          expression = this.AnyOf(filter.column, values);\n        } else if (filter.column.element && filter.column.element.isCalculatedElement && filter.column.element.display.isDate) {\n          expression = this.In(filter.column, values.map((value) => {\n            return new Date(value).getTime() / 1000;\n          }));\n        } else {\n          expression = this.In(filter.column, values);\n        }\n\n        if (hasNull) {\n          expression = BoolExpr(1, [ NullTest(0, columnRef(filter.column)), expression ]);\n        }\n      } else if (hasNull) {\n        expression = NullTest(0, columnRef(filter.column));\n      }\n    } else if (filter.isEmptySet) {\n      // add 1 = 0 clause to return 0 rows\n      expression = AExpr(0, '=', AConst(IntegerValue(1)), AConst(IntegerValue(0)));\n    }\n\n    return expression;\n  }\n\n  boundingBoxFilter(query, boundingBox) {\n    const [xmin, ymin, xmax, ymax] = boundingBox;\n\n    const columnName = query.ast ? '__geometry' : '_geometry';\n\n    // if the east value is less than the west value, the bbox spans the 180 meridian.\n    // Split the box into 2 separate boxes on either side of the meridian and use\n    // an OR statement in the where clause so records on either side of the meridian\n    // will be returned.\n    if (xmax < xmin) {\n      const box1 = [ xmin, ymin, 180, ymax ];\n      const box2 = [ -180, ymin, xmax, ymax ];\n\n      const boxes = [ this.geometryQuery(columnName, box1),\n                      this.geometryQuery(columnName, box2) ];\n\n      return BoolExpr(1, boxes);\n    }\n\n    return this.geometryQuery(columnName, boundingBox);\n  }\n\n  geometryQuery(columnName, boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    return AExpr(0, '&&', ColumnRef(columnName), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%').replace(/_/g, '\\\\_%');\n  }\n\n  searchFilter(query, search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    // if it's a fully custom SQL statement, use a simpler form with no index\n    if (query.ast) {\n      return AExpr(8, '~~*', TypeCast(TypeName('text'), ColumnRef('records')),\n                   AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n    }\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery('english', term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  summaryWhereClause(query, columnSetting, {boundingBox, searchFilter}) {\n    const expressions = [];\n\n    const converters = {\n      [AggregateType.Empty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.NotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentEmpty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentNotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      }\n    };\n\n    const expressionConverter = converters[columnSetting.summary.aggregate];\n\n    if (expressionConverter) {\n      expressions.push(expressionConverter());\n    }\n\n    return this.whereClause(query, boundingBox, searchFilter, {expressions});\n  }\n\n  summaryTargetList(query, columnSetting) {\n    const simpleFunctionResTarget = (funcName, param) => {\n      return () => {\n        return [ ResTarget(FuncCall(funcName, [ param || columnRef(columnSetting.column) ]), 'value') ];\n      };\n    };\n\n    const converter = {\n      [AggregateType.Sum.name]: simpleFunctionResTarget('sum'),\n      [AggregateType.Average.name]: simpleFunctionResTarget('avg'),\n      [AggregateType.Min.name]: simpleFunctionResTarget('min'),\n      [AggregateType.Max.name]: simpleFunctionResTarget('max'),\n      [AggregateType.StdDev.name]: simpleFunctionResTarget('stddev'),\n      [AggregateType.Histogram.name]: simpleFunctionResTarget('count'),\n      [AggregateType.Empty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.NotEmpty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.Unique.name]: () => {\n        return [ ResTarget(FuncCall('count', [ columnRef(columnSetting.column) ], {agg_distinct: true}), 'value') ];\n      },\n      [AggregateType.PercentEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentNotEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentUnique.name]: simpleFunctionResTarget('count')\n    };\n\n    return converter[columnSetting.summary.aggregate]();\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    if (expression === options.except) {\n      return null;\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.DateBetween.name]: this.BetweenConverter,\n      [OperatorType.DateNotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayIsContainedIn.name]: this.ArrayIsContainedIn,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast7Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast30Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast90Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    return converter[expression.operator](expression, options);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    return NullTest(1, columnRef(expression.column));\n  }\n\n  EmptyConverter = (expression) => {\n    return NullTest(0, columnRef(expression.column));\n  }\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options, expression.column.isDateTime).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options, expression.column.isDateTime).endOf('day'));\n    }\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options, expression.column.isDateTime).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options, expression.column.isDateTime).endOf('day'));\n    }\n\n    return this.NotBetween(expression.column, value1, value2);\n  }\n\n  InConverter = (expression) => {\n    return this.In(expression.column, expression.arrayValue);\n  }\n\n  NotInConverter = (expression) => {\n    return this.NotIn(expression.column, expression.arrayValue);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return this.ConstValue(expression.column, expression.scalarValue);\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n\n    return null;\n  }\n\n  TextNotMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '!~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n    return null;\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    return this.AnyOf(expression.column, expression.arrayValue);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '@>', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayIsContainedIn = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '<@', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    const a = AExpr(0, '<@', columnRef(expression.column),\n                    values);\n\n    const b = AExpr(0, '@>', columnRef(expression.column),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ this.ConstValue(expression.column, expression.scalarValue) ]);\n\n    return AExpr(0, '@@', columnRef(expression.column),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const now = this.GetDate(null, options, true);\n\n    const range = calculateDateRange(expression.operator, expression.value, now);\n\n    const value1 = this.ConvertDateValue(range[0]);\n    const value2 = this.ConvertDateValue(range[1]);\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetween = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(11, 'NOT BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '<', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '>', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  AnyOf = (column, values) => {\n    const arrayValues = AArrayExpr(values.map(v => this.ConstValue(column, v)));\n\n    return AExpr(0, '&&', columnRef(column), arrayValues);\n  }\n\n  In = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '=', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(0, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(0, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  NotIn = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '<>', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(1, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(1, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  Between = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(10, 'BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '>=', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '<=', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  ConstValue = (column, value) => {\n    if (value == null) {\n      return null;\n    }\n\n    if (column.isInteger) {\n      return AConst(IntegerValue(value));\n    }\n\n    if (column.isNumber) {\n      return AConst(FloatValue(value));\n    }\n\n    return AConst(StringValue(value));\n  }\n\n  GetDate = (date, options, isDateTime) => {\n    date = date || new Date().toISOString();\n\n    if (!isDateTime) {\n      // the `date` value comes in as the string \"2017-11-12 23:59:59\". We want it to be interpreted as UTC for the\n      // purposes of the SQL query generation. So we convert the local timestamp to a UTC one. We don't care if it's\n      // in a different timezone, we just need to make sure the date component of the timestamp is identical to the\n      // value stored in the date field. We are effectively disregarding the time component of the timestamp.\n      return moment(date.replace(' ', 'T') + 'Z').utc();\n    }\n\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    return moment.tz(date, timeZone);\n  }\n\n  ConvertDateValue = (date) => {\n    if (date) {\n      return date.clone().toISOString();\n    }\n    return null;\n  }\n\n  ConvertToText = (column) => {\n    if (column.isDate || column.isTime || column.isArray) {\n      return TypeCast(TypeName('text'), columnRef(column));\n    }\n\n    return columnRef(column);\n  }\n\n  IsValidRegExp = (string) => {\n    try {\n      return !!(new RegExp(string));\n    } catch (ex) {\n      return false;\n    }\n  }\n}\n"],"mappings":"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"}