{"version":3,"sources":["../../src/schema/simple-column.js"],"names":["SimpleColumn","name","attributeName","columnName","type","accessor","join","sql","index","object","_type","_name","_attributeName","_columnName","_accessor","defaultAccessor","_sql","_index","_join","Join","valueFrom","exportValue","options","split","Column"],"mappings":";;;;;AAAA;;AACA;;;;;;;;;;;;;;IAEqBA,Y;;;;;AACnB,8BAA6G;AAAA;;AAAA,QAAhGC,IAAgG,QAAhGA,IAAgG;AAAA,QAA1FC,aAA0F,QAA1FA,aAA0F;AAAA,QAA3EC,UAA2E,QAA3EA,UAA2E;AAAA,yBAA/DC,IAA+D;AAAA,QAA/DA,IAA+D,0BAAxD,IAAwD;AAAA,6BAAlDC,QAAkD;AAAA,QAAlDA,QAAkD,8BAAvC,IAAuC;AAAA,yBAAjCC,IAAiC;AAAA,QAAjCA,IAAiC,0BAA1B,IAA0B;AAAA,wBAApBC,GAAoB;AAAA,QAApBA,GAAoB,yBAAd,IAAc;AAAA,QAARC,KAAQ,QAARA,KAAQ;AAC3G;;AAD2G,sEA4D3F,UAACC,MAAD,EAAY;AAC5B,aAAOA,MAAM,CAAC,MAAKP,aAAN,CAAb;AACD,KA9D4G;;AAG3G,UAAKQ,KAAL,GAAaN,IAAI,IAAI,QAArB;AACA,UAAKO,KAAL,GAAaV,IAAb;AACA,UAAKW,cAAL,GAAsBV,aAAtB;AACA,UAAKW,WAAL,GAAmBV,UAAnB;AACA,UAAKW,SAAL,GAAiBT,QAAQ,IAAI,MAAKU,eAAlC;AACA,UAAKC,IAAL,GAAY,CAAC,CAACT,GAAd;AACA,UAAKU,MAAL,GAAcT,KAAd;;AAEA,QAAIF,IAAJ,EAAU;AACR,YAAKY,KAAL,GAAa,IAAIC,gBAAJ,CAASb,IAAT,CAAb;AACD;;AAb0G;AAc5G;;;;SAkDDc,S,GAAA,mBAAUX,MAAV,EAAkB;AAChB,WAAO,KAAKK,SAAL,CAAeL,MAAf,CAAP;AACD,G;;SAEDY,W,GAAA,qBAAYZ,MAAZ,EAAoBa,OAApB,EAAkC;AAAA,QAAdA,OAAc;AAAdA,MAAAA,OAAc,GAAJ,EAAI;AAAA;;AAChC,WAAO,KAAKR,SAAL,CAAeL,MAAf,EAAuBa,OAAvB,CAAP;AACD,G;;;;wBAtDU;AACT,aAAO,KAAKZ,KAAZ;AACD;;;wBAEQ;AACP,UAAI,KAAKM,IAAT,EAAe;AACb;AACA,sBAAY,KAAKC,MAAjB,SAA2B,KAAKJ,WAAhC;AACD;;AACD,aAAO,KAAKA,WAAZ;AACD;;;wBAEU;AACT,aAAO,KAAKF,KAAZ;AACD;;;wBAEU;AACT,aAAO,KAAKO,KAAZ;AACD;;;wBAEY;AACX,UAAI,KAAKZ,IAAT,EAAe;AACb,eAAO,KAAKO,WAAL,CAAiBU,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAP;AACD;;AAED,aAAO,IAAP;AACD;;;wBAEsB;AACrB,aAAO,KAAKpB,UAAZ;AACD;;;wBAEgB;AACf,UAAI,KAAKG,IAAT,EAAe;AACb,eAAO,KAAKO,WAAL,CAAiBU,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAP;AACD;;AAED,aAAO,KAAKV,WAAZ;AACD;;;wBAEmB;AAClB,aAAO,KAAKD,cAAZ;AACD;;;wBAcW;AACV,aAAO,KAAKI,IAAZ;AACD;;;;EA3EuCQ,kB","sourcesContent":["import Column from './column';\nimport Join from './join';\n\nexport default class SimpleColumn extends Column {\n  constructor({name, attributeName, columnName, type = null, accessor = null, join = null, sql = null, index}) {\n    super();\n\n    this._type = type || 'string';\n    this._name = name;\n    this._attributeName = attributeName;\n    this._columnName = columnName;\n    this._accessor = accessor || this.defaultAccessor;\n    this._sql = !!sql;\n    this._index = index;\n\n    if (join) {\n      this._join = new Join(join);\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get id() {\n    if (this._sql) {\n      // The double underscore is the marker for an internal column id\n      return `__${this._index}:${this._columnName}`;\n    }\n    return this._columnName;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get join() {\n    return this._join;\n  }\n\n  get source() {\n    if (this.join) {\n      return this._columnName.split('.')[0];\n    }\n\n    return null;\n  }\n\n  get joinedColumnName() {\n    return this.columnName;\n  }\n\n  get columnName() {\n    if (this.join) {\n      return this._columnName.split('.')[1];\n    }\n\n    return this._columnName;\n  }\n\n  get attributeName() {\n    return this._attributeName;\n  }\n\n  defaultAccessor = (object) => {\n    return object[this.attributeName];\n  }\n\n  valueFrom(object) {\n    return this._accessor(object);\n  }\n\n  exportValue(object, options = {}) {\n    return this._accessor(object, options);\n  }\n\n  get isSQL() {\n    return this._sql;\n  }\n}\n"],"file":"simple-column.js"}