{"version":3,"file":"simple-column.js","sourceRoot":"","sources":["../../src/schema/simple-column.js"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,kDAA0B;AAE1B,MAAqB,YAAa,SAAQ,gBAAM;IAC9C,YAAY,EAAC,IAAI,EAAE,aAAa,EAAE,UAAU,EAAE,IAAI,GAAG,IAAI,EAAE,QAAQ,GAAG,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,KAAK,EAAC;QACzG,KAAK,EAAE,CAAC;QA2DV,oBAAe,GAAG,CAAC,MAAM,EAAE,EAAE;YAC3B,OAAO,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACpC,CAAC,CAAA;QA3DC,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,QAAQ,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,KAAK,GAAG,IAAI,cAAI,CAAC,IAAI,CAAC,CAAC;SAC7B;IACH,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,EAAE;QACJ,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,gEAAgE;YAChE,OAAO,KAAK,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;SAC/C;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,MAAM;QACR,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,UAAU;QACZ,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC;QAED,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAMD,SAAS,CAAC,MAAM;QACd,IAAI,IAAI,CAAC,aAAa,KAAK,WAAW,EAAE;YACtC,OAAO,MAAM,CAAC,UAAU,CAAC;SAC1B;QACD,IAAI,IAAI,CAAC,aAAa,KAAK,gBAAgB,EAAE;YAC3C,OAAO,MAAM,CAAC,eAAe,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,WAAW,CAAC,MAAM,EAAE,OAAO,GAAG,EAAE;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAlFD,+BAkFC","sourcesContent":["import Column from './column';\nimport Join from './join';\n\nexport default class SimpleColumn extends Column {\n  constructor({name, attributeName, columnName, type = null, accessor = null, join = null, sql = null, index}) {\n    super();\n\n    this._type = type || 'string';\n    this._name = name;\n    this._attributeName = attributeName;\n    this._columnName = columnName;\n    this._accessor = accessor || this.defaultAccessor;\n    this._sql = !!sql;\n    this._index = index;\n\n    if (join) {\n      this._join = new Join(join);\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get id() {\n    if (this._sql) {\n      // The double underscore is the marker for an internal column id\n      return `__${this._index}:${this._columnName}`;\n    }\n    return this._columnName;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get join() {\n    return this._join;\n  }\n\n  get source() {\n    if (this.join) {\n      return this._columnName.split('.')[0];\n    }\n\n    return null;\n  }\n\n  get joinedColumnName() {\n    return this.columnName;\n  }\n\n  get columnName() {\n    if (this.join) {\n      return this._columnName.split('.')[1];\n    }\n\n    return this._columnName;\n  }\n\n  get attributeName() {\n    return this._attributeName;\n  }\n\n  defaultAccessor = (object) => {\n    return object[this.attributeName];\n  }\n\n  valueFrom(object) {\n    if (this.attributeName === 'recordKey') {\n      return object._recordKey;\n    }\n    if (this.attributeName === 'recordSequence') {\n      return object._recordSequence;\n    }\n    return this._accessor(object);\n  }\n\n  exportValue(object, options = {}) {\n    return this._accessor(object, options);\n  }\n\n  get isSQL() {\n    return this._sql;\n  }\n}\n"]}