{"version":3,"file":"aggregate.js","sourceRoot":"","sources":["../src/aggregate.js"],"names":[],"mappings":"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","sourcesContent":["export const AggregateType = {\n  Sum: {\n    name: 'sum',\n    label: 'Sum'\n  },\n  Average: {\n    name: 'average',\n    label: 'Average'\n  },\n  Median: {\n    name: 'median',\n    label: 'Median'\n  },\n  Min: {\n    name: 'min',\n    label: 'Min'\n  },\n  Max: {\n    name: 'max',\n    label: 'Max'\n  },\n  StdDev: {\n    name: 'stddev',\n    label: 'Standard Deviation'\n  },\n  Histogram: {\n    name: 'histogram',\n    label: 'Histogram'\n  },\n  Empty: {\n    name: 'empty',\n    label: 'Count Blank',\n    count: true\n  },\n  NotEmpty: {\n    name: 'not_empty',\n    label: 'Count Not Blank',\n    count: true\n  },\n  Unique: {\n    name: 'unique',\n    label: 'Count Unique Values',\n    count: true\n  },\n  PercentEmpty: {\n    name: 'percent_empty',\n    label: '% Blank'\n  },\n  PercentNotEmpty: {\n    name: 'percent_not_empty',\n    label: '% Not Blank'\n  },\n  PercentUnique: {\n    name: 'percent_unique',\n    label: '% Unique'\n  }\n};\n\nexport const AggregatesByValue = {};\n\nfor (const key of Object.keys(AggregateType)) {\n  AggregatesByValue[AggregateType[key].name] = AggregateType[key];\n}\n\nconst TEXTUAL_AGGREGATES = [\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nconst NUMERIC_AGGREGATES = [\n  AggregateType.Sum,\n  AggregateType.Average,\n  // AggregateType.Median,\n  AggregateType.Min,\n  AggregateType.Max,\n  AggregateType.StdDev,\n  AggregateType.Histogram,\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nconst DATE_AGGREGATES = [\n  AggregateType.Min,\n  AggregateType.Max,\n  AggregateType.Histogram,\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nexport function availableAggregatesForColumn(column) {\n  const aggregates = [];\n\n  if (column == null) {\n    return aggregates;\n  }\n\n  // Repeatable columns don't have a physical column to enable aggregates\n  // this column is the \"4 items\" value, which requires the in-memory record.\n  // Until we add an underlying db column for the item count, we can't do any\n  // aggregates on the repeatable itself.\n  if (column.element && column.element.isRepeatableElement) {\n    return aggregates;\n  }\n\n  if (column.isNumber) {\n    aggregates.push.apply(aggregates, NUMERIC_AGGREGATES);\n  } else if (column.isArray) {\n    // aggregates.push.apply(operators, ARRAY_OPERATORS);\n  } else if (column.isDate) {\n    aggregates.push.apply(aggregates, DATE_AGGREGATES);\n  } else {\n    aggregates.push.apply(aggregates, TEXTUAL_AGGREGATES);\n  }\n\n  return aggregates;\n}\n\nexport { TEXTUAL_AGGREGATES };\nexport { NUMERIC_AGGREGATES };\nexport { DATE_AGGREGATES };\n"]}