{"version":3,"file":"aggregate.js","names":["AggregateType","Sum","name","label","Average","Median","Min","Max","StdDev","Histogram","Empty","count","NotEmpty","Unique","PercentEmpty","PercentNotEmpty","PercentUnique","AggregatesByValue","Object","keys","key","TEXTUAL_AGGREGATES","NUMERIC_AGGREGATES","DATE_AGGREGATES","availableAggregatesForColumn","column","aggregates","element","isRepeatableElement","isNumber","push","apply","isArray","isDate"],"sources":["../src/aggregate.js"],"sourcesContent":["export const AggregateType = {\n  Sum: {\n    name: 'sum',\n    label: 'Sum'\n  },\n  Average: {\n    name: 'average',\n    label: 'Average'\n  },\n  Median: {\n    name: 'median',\n    label: 'Median'\n  },\n  Min: {\n    name: 'min',\n    label: 'Min'\n  },\n  Max: {\n    name: 'max',\n    label: 'Max'\n  },\n  StdDev: {\n    name: 'stddev',\n    label: 'Standard Deviation'\n  },\n  Histogram: {\n    name: 'histogram',\n    label: 'Histogram'\n  },\n  Empty: {\n    name: 'empty',\n    label: 'Count Blank',\n    count: true\n  },\n  NotEmpty: {\n    name: 'not_empty',\n    label: 'Count Not Blank',\n    count: true\n  },\n  Unique: {\n    name: 'unique',\n    label: 'Count Unique Values',\n    count: true\n  },\n  PercentEmpty: {\n    name: 'percent_empty',\n    label: '% Blank'\n  },\n  PercentNotEmpty: {\n    name: 'percent_not_empty',\n    label: '% Not Blank'\n  },\n  PercentUnique: {\n    name: 'percent_unique',\n    label: '% Unique'\n  }\n};\n\nexport const AggregatesByValue = {};\n\nfor (const key of Object.keys(AggregateType)) {\n  AggregatesByValue[AggregateType[key].name] = AggregateType[key];\n}\n\nconst TEXTUAL_AGGREGATES = [\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nconst NUMERIC_AGGREGATES = [\n  AggregateType.Sum,\n  AggregateType.Average,\n  // AggregateType.Median,\n  AggregateType.Min,\n  AggregateType.Max,\n  AggregateType.StdDev,\n  AggregateType.Histogram,\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nconst DATE_AGGREGATES = [\n  AggregateType.Min,\n  AggregateType.Max,\n  AggregateType.Histogram,\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nexport function availableAggregatesForColumn(column) {\n  const aggregates = [];\n\n  if (column == null) {\n    return aggregates;\n  }\n\n  // Repeatable columns don't have a physical column to enable aggregates\n  // this column is the \"4 items\" value, which requires the in-memory record.\n  // Until we add an underlying db column for the item count, we can't do any\n  // aggregates on the repeatable itself.\n  if (column.element && column.element.isRepeatableElement) {\n    return aggregates;\n  }\n\n  if (column.isNumber) {\n    aggregates.push.apply(aggregates, NUMERIC_AGGREGATES);\n  } else if (column.isArray) {\n    // aggregates.push.apply(operators, ARRAY_OPERATORS);\n  } else if (column.isDate) {\n    aggregates.push.apply(aggregates, DATE_AGGREGATES);\n  } else {\n    aggregates.push.apply(aggregates, TEXTUAL_AGGREGATES);\n  }\n\n  return aggregates;\n}\n\nexport { TEXTUAL_AGGREGATES };\nexport { NUMERIC_AGGREGATES };\nexport { DATE_AGGREGATES };\n"],"mappings":";;;;;AAAO,IAAMA,aAAa,GAAG;EAC3BC,GAAG,EAAE;IACHC,IAAI,EAAE,KAAK;IACXC,KAAK,EAAE;EACT,CAAC;EACDC,OAAO,EAAE;IACPF,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE;EACT,CAAC;EACDE,MAAM,EAAE;IACNH,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE;EACT,CAAC;EACDG,GAAG,EAAE;IACHJ,IAAI,EAAE,KAAK;IACXC,KAAK,EAAE;EACT,CAAC;EACDI,GAAG,EAAE;IACHL,IAAI,EAAE,KAAK;IACXC,KAAK,EAAE;EACT,CAAC;EACDK,MAAM,EAAE;IACNN,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE;EACT,CAAC;EACDM,SAAS,EAAE;IACTP,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE;EACT,CAAC;EACDO,KAAK,EAAE;IACLR,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE,aAAa;IACpBQ,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRV,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,iBAAiB;IACxBQ,KAAK,EAAE;EACT,CAAC;EACDE,MAAM,EAAE;IACNX,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,qBAAqB;IAC5BQ,KAAK,EAAE;EACT,CAAC;EACDG,YAAY,EAAE;IACZZ,IAAI,EAAE,eAAe;IACrBC,KAAK,EAAE;EACT,CAAC;EACDY,eAAe,EAAE;IACfb,IAAI,EAAE,mBAAmB;IACzBC,KAAK,EAAE;EACT,CAAC;EACDa,aAAa,EAAE;IACbd,IAAI,EAAE,gBAAgB;IACtBC,KAAK,EAAE;EACT;AACF,CAAC;AAAC;AAEK,IAAMc,iBAAiB,GAAG,CAAC,CAAC;AAAC;AAEpC,gCAAkBC,MAAM,CAACC,IAAI,CAACnB,aAAa,CAAC,kCAAE;EAAzC,IAAMoB,GAAG;EACZH,iBAAiB,CAACjB,aAAa,CAACoB,GAAG,CAAC,CAAClB,IAAI,CAAC,GAAGF,aAAa,CAACoB,GAAG,CAAC;AACjE;AAEA,IAAMC,kBAAkB,GAAG,CACzBrB,aAAa,CAACU,KAAK,EACnBV,aAAa,CAACY,QAAQ,EACtBZ,aAAa,CAACa,MAAM,CACrB;AAAC;AAEF,IAAMS,kBAAkB,GAAG,CACzBtB,aAAa,CAACC,GAAG,EACjBD,aAAa,CAACI,OAAO;AACrB;AACAJ,aAAa,CAACM,GAAG,EACjBN,aAAa,CAACO,GAAG,EACjBP,aAAa,CAACQ,MAAM,EACpBR,aAAa,CAACS,SAAS,EACvBT,aAAa,CAACU,KAAK,EACnBV,aAAa,CAACY,QAAQ,EACtBZ,aAAa,CAACa,MAAM,CACrB;AAAC;AAEF,IAAMU,eAAe,GAAG,CACtBvB,aAAa,CAACM,GAAG,EACjBN,aAAa,CAACO,GAAG,EACjBP,aAAa,CAACS,SAAS,EACvBT,aAAa,CAACU,KAAK,EACnBV,aAAa,CAACY,QAAQ,EACtBZ,aAAa,CAACa,MAAM,CACrB;AAAC;AAEK,SAASW,4BAA4B,CAACC,MAAM,EAAE;EACnD,IAAMC,UAAU,GAAG,EAAE;EAErB,IAAID,MAAM,IAAI,IAAI,EAAE;IAClB,OAAOC,UAAU;EACnB;;EAEA;EACA;EACA;EACA;EACA,IAAID,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACE,OAAO,CAACC,mBAAmB,EAAE;IACxD,OAAOF,UAAU;EACnB;EAEA,IAAID,MAAM,CAACI,QAAQ,EAAE;IACnBH,UAAU,CAACI,IAAI,CAACC,KAAK,CAACL,UAAU,EAAEJ,kBAAkB,CAAC;EACvD,CAAC,MAAM,IAAIG,MAAM,CAACO,OAAO,EAAE;IACzB;EAAA,CACD,MAAM,IAAIP,MAAM,CAACQ,MAAM,EAAE;IACxBP,UAAU,CAACI,IAAI,CAACC,KAAK,CAACL,UAAU,EAAEH,eAAe,CAAC;EACpD,CAAC,MAAM;IACLG,UAAU,CAACI,IAAI,CAACC,KAAK,CAACL,UAAU,EAAEL,kBAAkB,CAAC;EACvD;EAEA,OAAOK,UAAU;AACnB"}