{"version":3,"file":"column-filter.js","sourceRoot":"","sources":["../src/column-filter.js"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nexport default class ColumnFilter {\n  constructor(attrs, schema) {\n    this._field = attrs.field;\n    this._value = attrs.value || null;\n    this._schema = schema;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  // when the filter is fully blank (default state) all rows are returned\n  get isNull() {\n    return this.value == null;\n  }\n\n  get hasFilter() {\n    return !this.isNull;\n  }\n\n  get hasValues() {\n    return this.value != null && this.value.length > 0;\n  }\n\n  // when the set is empty, it should always return no results\n  get isEmptySet() {\n    return this.value != null && this.value.length === 0;\n  }\n\n  get field() {\n    return this._field;\n  }\n\n  get column() {\n    return this._schema.columnForFieldKey(this.field);\n  }\n\n  get columnName() {\n    if (this.column) {\n      return this.column.columnName;\n    }\n    return null;\n  }\n\n  reset() {\n    this._value = null;\n  }\n\n  resetIfEmpty() {\n    if (this.isEmptySet) {\n      this.reset();\n    }\n  }\n\n  clearValues() {\n    this._value = [];\n  }\n\n  ensureValue(value) {\n    if (!this._value) {\n      this._value = [];\n    }\n\n    if (!this.containsValue(value)) {\n      this._value.push(value);\n    }\n  }\n\n  toggleValue(value) {\n    if (!this._value) {\n      this._value = [];\n    }\n\n    if (this.containsValue(value)) {\n      this._value = _.without(this.value, value);\n    } else {\n      this._value.push(value);\n    }\n  }\n\n  containsValue(value) {\n    if (this.value == null) {\n      return false;\n    }\n\n    return this.value.indexOf(value) > -1;\n  }\n\n  toJSON() {\n    if (!this.hasFilter) {\n      return null;\n    }\n\n    return {\n      field: this._field,\n      value: this._value\n    };\n  }\n\n  toHumanDescription() {\n    if (!this.hasFilter) {\n      return null;\n    }\n\n    return [\n      this.column ? this.column.name : this.field,\n      'one of',\n      '[' + this.value.join(', ') + ']'\n    ].join(' ');\n  }\n}\n"]}