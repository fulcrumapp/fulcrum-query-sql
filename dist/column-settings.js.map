{"version":3,"sources":["../src/column-settings.js"],"names":["ColumnSettings","schema","settings","_schema","_columns","_columnsByID","_allColumns","newColumns","existingSettingsByID","setting","column","id","columns","slice","index","length","existingAttributes","item","ColumnSettingsItem","hidden","push","newColumn","splice","reset","map","o","clear","toJSON","move","from","to","byColumn","enabledColumnSettings","c","filter","isVisible"],"mappings":"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","sourcesContent":["import arrayMove from 'array-move';\nimport ColumnSettingsItem from './column-settings-item';\n\nexport default class ColumnSettings {\n  constructor(schema, settings) {\n    this._schema = schema;\n\n    this._columns = [];\n    this._columnsByID = {};\n\n    this._allColumns = [];\n\n    const newColumns = [];\n\n    const existingSettingsByID = {};\n\n    if (settings) {\n      for (const setting of settings) {\n        existingSettingsByID[setting.column.id] = setting;\n      }\n    }\n\n    const columns = schema.columns.slice();\n\n    for (let index = 0; index < columns.length; ++index) {\n      const column = columns[index];\n\n      const existingAttributes = existingSettingsByID[column.id];\n\n      const item = new ColumnSettingsItem({...existingAttributes, column}, this._schema);\n\n      if (existingAttributes == null) {\n        item.hidden = true;\n        newColumns.push({column: item, index});\n      }\n\n      this._allColumns.push(item);\n      this._columnsByID[column.id] = item;\n    }\n\n    if (settings) {\n      for (const setting of settings) {\n        const item = this._columnsByID[setting.column.id];\n\n        if (item) {\n          this._columns.push(item);\n        }\n      }\n    }\n\n    for (const newColumn of newColumns) {\n      this._columns.splice(newColumn.index, 0, newColumn.column);\n    }\n  }\n\n  reset() {\n    this._columns = this._allColumns.slice();\n    this._columns.map(o => o.clear());\n  }\n\n  toJSON() {\n    return this.columns.map(o => o.toJSON());\n  }\n\n  move(from, to) {\n    this._columns = arrayMove(this._columns, from, to);\n  }\n\n  get enabledColumns() {\n    return this.enabledColumnSettings.map(c => c.column);\n  }\n\n  get enabledColumnSettings() {\n    return this.columns.filter(c => c.isVisible);\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  get columnsByID() {\n    return this._columnsByID;\n  }\n\n  byColumn(column) {\n    return this._columnsByID[column.id];\n  }\n}\n"],"file":"column-settings.js"}