{"version":3,"file":"condition.js","sourceRoot":"","sources":["../src/condition.js"],"names":[],"mappings":"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","sourcesContent":["import { Expression } from './expression';\nimport _ from 'lodash';\n\nexport const ConditionType = {\n  And: 'and',\n  Or: 'or',\n  Not: 'not'\n};\n\nexport class Condition {\n  constructor(attrs, schema) {\n    attrs = attrs || {};\n\n    this._type = attrs.type || ConditionType.And;\n    this._schema = schema;\n    this._expressions = [];\n\n    if (attrs.expressions) {\n      this._expressions = attrs.expressions.filter(o => o).map((o) => {\n        if (o.expressions) {\n          return new Condition(o, schema);\n        }\n\n        return new Expression(o, schema);\n      });\n    }\n\n    this.ensureEmptyExpression();\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._type = type;\n  }\n\n  get expressions() {\n    return this._expressions;\n  }\n\n  addEmptyCondition() {\n    const condition = new Condition({}, this._schema);\n\n    condition.addEmptyExpression();\n\n    this._expressions.push(condition);\n  }\n\n  removeCondition(condition) {\n    this._expressions = _.without(this._expressions, condition);\n  }\n\n  ensureEmptyExpression() {\n    let hasEmpty = false;\n\n    for (const expression of this._expressions) {\n      if (!expression.field) {\n        hasEmpty = true;\n        break;\n      }\n    }\n\n    if (!hasEmpty) {\n      this.addEmptyExpression();\n    }\n  }\n\n  addEmptyExpression() {\n    this._expressions.push(new Expression({}, this._schema));\n  }\n\n  removeExpression(expression) {\n    this._expressions = _.without(this._expressions, expression);\n  }\n\n  toJSON() {\n    const expressions = this.expressions.map(o => o.toJSON()).filter(o => o);\n\n    if (!expressions.length) {\n      return null;\n    }\n\n    return {\n      type: this.type,\n      expressions: expressions\n    };\n  }\n\n  get allExpressions() {\n    const expressions = [];\n\n    for (const o of this.expressions) {\n      if (o.expressions) {\n        expressions.push.apply(expressions, o.allExpressions);\n      } else {\n        expressions.push(o);\n      }\n    }\n\n    return expressions;\n  }\n\n  toHumanDescription(topLevel = false) {\n    if (this.expressions.length === 0) {\n      return null;\n    }\n\n    const descriptions = [];\n\n    for (const expression of this.expressions) {\n      const desc = expression.toHumanDescription();\n\n      if (desc) {\n        descriptions.push(desc);\n      }\n    }\n\n    if (descriptions.length === 0) {\n      return null;\n    }\n\n    if (this.type === 'not') {\n      return '(NOT ' + descriptions.join(' AND ') + ')';\n    }\n\n    return '(' + descriptions.join(' ' + this.type.toUpperCase() + ' ') + ')';\n  }\n}\n"]}