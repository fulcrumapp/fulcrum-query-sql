{"version":3,"sources":["../src/condition.js"],"names":["ConditionType","And","Or","Not","Condition","attrs","schema","_type","type","_schema","_expressions","expressions","filter","o","map","Expression","ensureEmptyExpression","addEmptyCondition","condition","addEmptyExpression","push","removeCondition","_","without","hasEmpty","expression","field","removeExpression","toJSON","length","toHumanDescription","topLevel","descriptions","desc","join","toUpperCase","apply","allExpressions"],"mappings":"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","sourcesContent":["import { Expression } from './expression';\nimport _ from 'lodash';\n\nexport const ConditionType = {\n  And: 'and',\n  Or: 'or',\n  Not: 'not'\n};\n\nexport class Condition {\n  constructor(attrs, schema) {\n    attrs = attrs || {};\n\n    this._type = attrs.type || ConditionType.And;\n    this._schema = schema;\n    this._expressions = [];\n\n    if (attrs.expressions) {\n      this._expressions = attrs.expressions.filter(o => o).map((o) => {\n        if (o.expressions) {\n          return new Condition(o, schema);\n        }\n\n        return new Expression(o, schema);\n      });\n    }\n\n    this.ensureEmptyExpression();\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._type = type;\n  }\n\n  get expressions() {\n    return this._expressions;\n  }\n\n  addEmptyCondition() {\n    const condition = new Condition({}, this._schema);\n\n    condition.addEmptyExpression();\n\n    this._expressions.push(condition);\n  }\n\n  removeCondition(condition) {\n    this._expressions = _.without(this._expressions, condition);\n  }\n\n  ensureEmptyExpression() {\n    let hasEmpty = false;\n\n    for (const expression of this._expressions) {\n      if (!expression.field) {\n        hasEmpty = true;\n        break;\n      }\n    }\n\n    if (!hasEmpty) {\n      this.addEmptyExpression();\n    }\n  }\n\n  addEmptyExpression() {\n    this._expressions.push(new Expression({}, this._schema));\n  }\n\n  removeExpression(expression) {\n    this._expressions = _.without(this._expressions, expression);\n  }\n\n  toJSON() {\n    const expressions = this.expressions.map(o => o.toJSON()).filter(o => o);\n\n    if (!expressions.length) {\n      return null;\n    }\n\n    return {\n      type: this.type,\n      expressions: expressions\n    };\n  }\n\n  get allExpressions() {\n    const expressions = [];\n\n    for (const o of this.expressions) {\n      if (o.expressions) {\n        expressions.push.apply(expressions, o.allExpressions);\n      } else {\n        expressions.push(o);\n      }\n    }\n\n    return expressions;\n  }\n\n  toHumanDescription(topLevel = false) {\n    if (this.expressions.length === 0) {\n      return null;\n    }\n\n    const descriptions = [];\n\n    for (const expression of this.expressions) {\n      const desc = expression.toHumanDescription();\n\n      if (desc) {\n        descriptions.push(desc);\n      }\n    }\n\n    if (descriptions.length === 0) {\n      return null;\n    }\n\n    if (this.type === 'not') {\n      return '(NOT ' + descriptions.join(' AND ') + ')';\n    }\n\n    return '(' + descriptions.join(' ' + this.type.toUpperCase() + ' ') + ')';\n  }\n}\n"],"file":"condition.js"}