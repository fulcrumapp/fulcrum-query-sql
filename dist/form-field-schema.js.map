{"version":3,"file":"form-field-schema.js","sourceRoot":"","sources":["../src/form-field-schema.js"],"names":[],"mappings":"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","sourcesContent":["import ElementColumn from './schema/element-column';\nimport SimpleColumn from './schema/simple-column';\n\nexport default class FormFieldSchema {\n  constructor({fullSchema = false}) {\n    this.fullSchema = fullSchema;\n  }\n\n  addSystemColumn(label, attribute, columnName, type, accessor, join, sql) {\n    const column = new SimpleColumn({name: label,\n                                     attributeName: attribute,\n                                     columnName: columnName,\n                                     type: type,\n                                     accessor: accessor,\n                                     join,\n                                     sql,\n                                     index: this._columns.length});\n    this._columns.push(column);\n    this._columnsByKey[column.id] = column;\n\n    return column;\n  }\n\n  addElementColumn(element, part, type) {\n    const columnKey = part ? element.key + '_' + part : element.key;\n\n    const rawColumn = this._rawColumnsByKey[columnKey];\n\n    return this.addRawElementColumn(element, rawColumn, null, type || rawColumn.type, part, columnKey);\n  }\n\n  addRawElementColumn(element, rawColumn, id, type, part, columnKey) {\n    const columnObject = new ElementColumn({element, rawColumn, type, id, part, index: this._columns.length});\n\n    this._columns.push(columnObject);\n    this._columnsByKey[columnKey] = columnObject;\n\n    return columnObject;\n  }\n\n  setupElementColumns() {\n    for (const element of this.elementsForColumns) {\n      // repeatable elements don't have any physical columns, but we want to add a column that has the count of items\n      if (element.isRepeatableElement) {\n        this.addElementColumn(element, null, 'integer');\n      } else if (element.isLocationElement) {\n        this.addElementColumn(element, 'address', 'string');\n        this.addElementColumn(element, 'latitude', 'double');\n        this.addElementColumn(element, 'longitude', 'double');\n      } else if (!element.isDynamicElement && !element.isButtonElement) {\n        this.addElementColumn(element);\n      }\n\n      if (this.fullSchema && element.isAddressElement) {\n        this.addElementColumn(element, 'sub_thoroughfare');\n        this.addElementColumn(element, 'thoroughfare');\n        this.addElementColumn(element, 'suite');\n        this.addElementColumn(element, 'locality');\n        this.addElementColumn(element, 'sub_admin_area');\n        this.addElementColumn(element, 'admin_area');\n        this.addElementColumn(element, 'postal_code');\n        this.addElementColumn(element, 'country');\n      }\n\n      if (this.fullSchema && (element.isPhotoElement || element.isVideoElement || element.isAudioElement)) {\n        this.addElementColumn(element, 'captions', 'array');\n        this.addElementColumn(element, 'urls', 'array');\n      }\n\n      if (this.fullSchema && element.isSignatureElement) {\n        this.addElementColumn(element, 'timestamp');\n      }\n\n      if (this.fullSchema && (element.isDynamicElement)) {\n        this.addElementColumn(element, 'metadata', 'array');\n        this.addElementColumn(element, 'elements', 'array');\n        this.addElementColumn(element, 'values', 'array');\n      }\n    }\n  }\n\n  findColumnByID(id) {\n    return this.columns.find(e => e.id === id);\n  }\n\n  columnForFieldKey(fieldKey, part) {\n    if (part) {\n      return this._columnsByKey[fieldKey + '_' + part];\n    }\n\n    return this._columnsByKey[fieldKey];\n  }\n\n  get geometryColumns() {\n    return this._columns.filter(c => c.isGeometry);\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  get allElements() {\n    if (!this._allElements) {\n      this._allElements = this.container.flattenElements(false);\n    }\n    return this._allElements;\n  }\n\n  get elementsForColumns() {\n    if (!this._elementsForColumns) {\n      this._elementsForColumns = [];\n\n      const elements = this.allElements;\n\n      for (const element of elements) {\n        const skip = element.isSectionElement ||\n                     element.isLabelElement;\n\n        if (!skip) {\n          this._elementsForColumns.push(element);\n        }\n      }\n    }\n\n    return this._elementsForColumns;\n  }\n}\n"]}